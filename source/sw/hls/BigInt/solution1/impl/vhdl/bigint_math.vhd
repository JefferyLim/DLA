-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bigint_math is
generic (
    C_S_AXI_PERIPH_BUS_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_PERIPH_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_PERIPH_BUS_AWVALID : IN STD_LOGIC;
    s_axi_PERIPH_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_PERIPH_BUS_WVALID : IN STD_LOGIC;
    s_axi_PERIPH_BUS_WREADY : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_DATA_WIDTH-1 downto 0);
    s_axi_PERIPH_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_PERIPH_BUS_ARVALID : IN STD_LOGIC;
    s_axi_PERIPH_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_PERIPH_BUS_RVALID : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_RREADY : IN STD_LOGIC;
    s_axi_PERIPH_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_DATA_WIDTH-1 downto 0);
    s_axi_PERIPH_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_PERIPH_BUS_BVALID : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_BREADY : IN STD_LOGIC;
    s_axi_PERIPH_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of bigint_math is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bigint_math,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.100000,HLS_SYN_LAT=147970,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=2,HLS_SYN_FF=442,HLS_SYN_LUT=439}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_29 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal a_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_ce0 : STD_LOGIC;
    signal b_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal c_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_95 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_102 : BOOLEAN;
    signal i_2_fu_196_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_112 : BOOLEAN;
    signal i_3_fu_213_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_reg_391 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_121 : BOOLEAN;
    signal k_fu_219_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_addr_reg_401 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_fu_242_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_reg_409 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_138 : BOOLEAN;
    signal exitcond_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_load_reg_419 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_151 : BOOLEAN;
    signal a_load_reg_425 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_addr_1_reg_431 : STD_LOGIC_VECTOR (7 downto 0);
    signal prod_fu_264_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal prod_reg_436 : STD_LOGIC_VECTOR (7 downto 0);
    signal carry_reg_441 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_304_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_2_reg_451 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_456 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_174 : BOOLEAN;
    signal k_1_fu_328_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_reg_461 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_183 : BOOLEAN;
    signal c_addr_3_reg_466 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_352_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_471 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_4_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_375_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_reg_480 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_201 : BOOLEAN;
    signal i_reg_136 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_147 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_226 : BOOLEAN;
    signal k1_reg_169 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_249 : BOOLEAN;
    signal tmp_3_fu_225_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_274_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_274_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_cast_fu_294_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_cast_fu_290_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_298_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_312_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_cast_fu_343_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_cast_fu_339_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_346_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k1_cast_fu_360_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_364_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_274_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_274_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component bigint_math_PERIPH_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        a_ce0 : IN STD_LOGIC;
        a_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        b_ce0 : IN STD_LOGIC;
        b_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        c_ce0 : IN STD_LOGIC;
        c_we0 : IN STD_LOGIC;
        c_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        c_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    bigint_math_PERIPH_BUS_s_axi_U : component bigint_math_PERIPH_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_PERIPH_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_PERIPH_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_PERIPH_BUS_AWVALID,
        AWREADY => s_axi_PERIPH_BUS_AWREADY,
        AWADDR => s_axi_PERIPH_BUS_AWADDR,
        WVALID => s_axi_PERIPH_BUS_WVALID,
        WREADY => s_axi_PERIPH_BUS_WREADY,
        WDATA => s_axi_PERIPH_BUS_WDATA,
        WSTRB => s_axi_PERIPH_BUS_WSTRB,
        ARVALID => s_axi_PERIPH_BUS_ARVALID,
        ARREADY => s_axi_PERIPH_BUS_ARREADY,
        ARADDR => s_axi_PERIPH_BUS_ARADDR,
        RVALID => s_axi_PERIPH_BUS_RVALID,
        RREADY => s_axi_PERIPH_BUS_RREADY,
        RDATA => s_axi_PERIPH_BUS_RDATA,
        RRESP => s_axi_PERIPH_BUS_RRESP,
        BVALID => s_axi_PERIPH_BUS_BVALID,
        BREADY => s_axi_PERIPH_BUS_BREADY,
        BRESP => s_axi_PERIPH_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a_address0 => a_address0,
        a_ce0 => a_ce0,
        a_q0 => a_q0,
        b_address0 => b_addr_reg_401,
        b_ce0 => b_ce0,
        b_q0 => b_q0,
        c_address0 => c_address0,
        c_ce0 => c_ce0,
        c_we0 => c_we0,
        c_d0 => c_d0,
        c_q0 => c_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_236_p2)))) then 
                i_1_reg_147 <= i_3_reg_391;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_190_p2)))) then 
                i_1_reg_147 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_190_p2))) then 
                i_reg_136 <= i_2_fu_196_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_136 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                j_reg_158 <= j_1_reg_409;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_207_p2 = ap_const_lv1_0))) then 
                j_reg_158 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    k1_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                k1_reg_169 <= k_1_reg_461;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_207_p2 = ap_const_lv1_0))) then 
                k1_reg_169 <= k_fu_219_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                a_load_reg_425 <= a_q0;
                b_load_reg_419 <= b_q0;
                c_addr_1_reg_431 <= tmp_5_fu_259_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_207_p2 = ap_const_lv1_0))) then
                b_addr_reg_401 <= tmp_4_fu_231_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_8_fu_304_p3)))) then
                c_addr_2_reg_451 <= tmp_9_fu_318_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                c_addr_3_reg_466 <= tmp_12_fu_334_p1(8 - 1 downto 0);
                k_1_reg_461 <= k_1_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = tmp_14_fu_352_p3)))) then
                c_addr_4_reg_475 <= tmp_16_fu_370_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                carry_reg_441 <= tmp_1_fu_274_p2(15 downto 8);
                prod_reg_436 <= prod_fu_264_p2;
                tmp_8_reg_447 <= tmp_s_fu_298_p2(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_3_reg_391 <= i_3_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_1_reg_409 <= j_1_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then
                reg_186 <= c_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                tmp_11_reg_456 <= tmp_11_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                tmp_14_reg_471 <= tmp_13_fu_346_p2(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                tmp_18_reg_480 <= tmp_18_fu_375_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_207_p2, exitcond_fu_236_p2, exitcond2_fu_190_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond2_fu_190_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond1_fu_207_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond_fu_236_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    a_address0 <= tmp_7_fu_254_p1(7 - 1 downto 0);

    a_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_207_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_207_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_207_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_207_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_102 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_112 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_121 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_138_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_138 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_151_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_151 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_174 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_183 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_201_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_201 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_226_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_226 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_249_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_249 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_29_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_29 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_95_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_95 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_102)
    begin
        if (ap_sig_102) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_201)
    begin
        if (ap_sig_201) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_226)
    begin
        if (ap_sig_226) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_29)
    begin
        if (ap_sig_29) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_112)
    begin
        if (ap_sig_112) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_121)
    begin
        if (ap_sig_121) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_138)
    begin
        if (ap_sig_138) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_151)
    begin
        if (ap_sig_151) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_95)
    begin
        if (ap_sig_95) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_174)
    begin
        if (ap_sig_174) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_249)
    begin
        if (ap_sig_249) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_183)
    begin
        if (ap_sig_183) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4, c_addr_1_reg_431, c_addr_2_reg_451, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, c_addr_3_reg_466, c_addr_4_reg_475, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11, tmp_fu_202_p1, tmp_5_fu_259_p1, tmp_9_fu_318_p1, tmp_12_fu_334_p1, tmp_16_fu_370_p1, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            c_address0 <= c_addr_3_reg_466;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            c_address0 <= c_addr_4_reg_475;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            c_address0 <= c_addr_1_reg_431;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            c_address0 <= c_addr_2_reg_451;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            c_address0 <= tmp_fu_202_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            c_address0 <= tmp_16_fu_370_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            c_address0 <= tmp_12_fu_334_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            c_address0 <= tmp_9_fu_318_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address0 <= tmp_5_fu_259_p1(8 - 1 downto 0);
        else 
            c_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_11_reg_456, ap_sig_cseq_ST_st7_fsm_6, tmp_18_reg_480, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11, grp_fu_179_p2, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            c_d0 <= tmp_18_reg_480;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            c_d0 <= tmp_11_reg_456;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            c_d0 <= grp_fu_179_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            c_d0 <= ap_const_lv8_0;
        else 
            c_d0 <= "XXXXXXXX";
        end if; 
    end process;


    c_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_8_reg_447, ap_sig_cseq_ST_st7_fsm_6, tmp_14_reg_471, ap_sig_cseq_ST_st11_fsm_10, exitcond2_fu_190_p2, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_190_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_8_reg_447))) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = tmp_14_reg_471))))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_207_p2 <= "1" when (i_1_reg_147 = ap_const_lv8_80) else "0";
    exitcond2_fu_190_p2 <= "1" when (i_reg_136 = ap_const_lv9_100) else "0";
    exitcond_fu_236_p2 <= "1" when (j_reg_158 = ap_const_lv8_80) else "0";
    grp_fu_179_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(c_q0));
    i_2_fu_196_p2 <= std_logic_vector(unsigned(i_reg_136) + unsigned(ap_const_lv9_1));
    i_3_fu_213_p2 <= std_logic_vector(unsigned(i_1_reg_147) + unsigned(ap_const_lv8_1));
    j_1_fu_242_p2 <= std_logic_vector(unsigned(j_reg_158) + unsigned(ap_const_lv8_1));
    k1_cast_fu_360_p1 <= std_logic_vector(resize(unsigned(k1_reg_169),9));
    k_1_fu_328_p2 <= std_logic_vector(unsigned(k1_reg_169) + unsigned(ap_const_lv8_FF));
    k_fu_219_p2 <= (i_1_reg_147 xor ap_const_lv8_FF);
    prod_fu_264_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(b_load_reg_419) * signed(a_load_reg_425))), 8));
    tmp_10_cast_fu_294_p1 <= std_logic_vector(resize(unsigned(prod_fu_264_p2),9));
    tmp_11_fu_323_p2 <= std_logic_vector(unsigned(reg_186) + unsigned(prod_reg_436));
    tmp_12_fu_334_p1 <= std_logic_vector(resize(unsigned(k_1_fu_328_p2),64));
    tmp_13_fu_346_p2 <= std_logic_vector(unsigned(tmp_21_cast_fu_343_p1) + unsigned(tmp_20_cast_fu_339_p1));
    tmp_14_fu_352_p3 <= tmp_13_fu_346_p2(8 downto 8);
    tmp_15_fu_364_p2 <= std_logic_vector(signed(ap_const_lv9_1FE) + signed(k1_cast_fu_360_p1));
        tmp_16_fu_370_p1 <= std_logic_vector(resize(signed(tmp_15_fu_364_p2),64));

    tmp_18_fu_375_p2 <= std_logic_vector(unsigned(reg_186) + unsigned(carry_reg_441));
    tmp_1_fu_274_p0 <= tmp_1_fu_274_p00(8 - 1 downto 0);
    tmp_1_fu_274_p00 <= std_logic_vector(resize(unsigned(b_load_reg_419),16));
    tmp_1_fu_274_p1 <= tmp_1_fu_274_p10(8 - 1 downto 0);
    tmp_1_fu_274_p10 <= std_logic_vector(resize(unsigned(a_load_reg_425),16));
    tmp_1_fu_274_p2 <= std_logic_vector(resize(unsigned(tmp_1_fu_274_p0) * unsigned(tmp_1_fu_274_p1), 16));
    tmp_20_cast_fu_339_p1 <= std_logic_vector(resize(unsigned(c_q0),9));
    tmp_21_cast_fu_343_p1 <= std_logic_vector(resize(unsigned(carry_reg_441),9));
    tmp_2_fu_312_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(k1_reg_169));
    tmp_3_fu_225_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(i_1_reg_147));
    tmp_4_fu_231_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_225_p2),64));
    tmp_5_fu_259_p1 <= std_logic_vector(resize(unsigned(k1_reg_169),64));
    tmp_6_fu_248_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(j_reg_158));
    tmp_7_fu_254_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_248_p2),64));
    tmp_8_cast_fu_290_p1 <= std_logic_vector(resize(unsigned(c_q0),9));
    tmp_8_fu_304_p3 <= tmp_s_fu_298_p2(8 downto 8);
    tmp_9_fu_318_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_312_p2),64));
    tmp_fu_202_p1 <= std_logic_vector(resize(unsigned(i_reg_136),64));
    tmp_s_fu_298_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_294_p1) + unsigned(tmp_8_cast_fu_290_p1));
end behav;
