

================================================================
== Vivado HLS Report for 'bigint_math_bigint_leftshift'
================================================================
* Date:           Sun Mar 19 09:53:12 2017

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        BigInt
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  50.00|      8.36|        6.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+------+-----+------+---------+
    |   Latency  |  Interval  | Pipeline|
    | min |  max | min |  max |   Type  |
    +-----+------+-----+------+---------+
    |  514|  6914|  514|  6914|   none  |
    +-----+------+-----+------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+------+------+----------+-----------+-----------+------+----------+
        |             |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        |  Loop Name  |  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------+------+------+----------+-----------+-----------+------+----------+
        |- Loop 1     |   512|   512|         2|          -|          -|   256|    no    |
        |- Loop 2     |   256|   256|         1|          -|          -|   256|    no    |
        |- Loop 3     |  6656|  6656|        26|          -|          -|   256|    no    |
        | + Loop 3.1  |    24|    24|         3|          -|          -|     8|    no    |
        +-------------+------+------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 8
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	7  / (tmp)
	2  / (!tmp)
2 --> 
	3  / (exitcond_i8)
	2  / (!exitcond_i8)
3 --> 
	4  / (!tmp & !tmp_19)
4 --> 
	5  / (!exitcond)
	3  / (exitcond)
5 --> 
	6  / true
6 --> 
	4  / true
7 --> 
	3  / (exitcond_i)
	8  / (!exitcond_i)
8 --> 
	7  / true
* FSM state operations: 

 <State 1>: 8.36ns
ST_1: empty [1/1] 0.00ns
:0  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([256 x i8]* %a, [1 x i8]* @p_str10, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str10, i32 -1, [1 x i8]* @p_str10, [1 x i8]* @p_str10, [1 x i8]* @p_str10, [1 x i8]* @p_str10, [1 x i8]* @p_str10)

ST_1: empty_69 [1/1] 0.00ns
:1  %empty_69 = call i32 (...)* @_ssdm_op_SpecMemCore([256 x i8]* %out_r, [1 x i8]* @p_str10, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str10, i32 -1, [1 x i8]* @p_str10, [1 x i8]* @p_str10, [1 x i8]* @p_str10, [1 x i8]* @p_str10, [1 x i8]* @p_str10)

ST_1: shift_read [1/1] 1.04ns
:2  %shift_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %shift)

ST_1: tmp [1/1] 2.52ns
:3  %tmp = icmp eq i32 %shift_read, 0

ST_1: stg_13 [1/1] 1.57ns
:4  br i1 %tmp, label %.preheader10, label %2

ST_1: tmp_16 [1/1] 0.00ns
:0  %tmp_16 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %shift_read, i32 31)

ST_1: p_neg [1/1] 2.44ns
:1  %p_neg = sub i32 0, %shift_read

ST_1: tmp_6 [1/1] 0.00ns
:2  %tmp_6 = call i29 @_ssdm_op_PartSelect.i29.i32.i32.i32(i32 %p_neg, i32 3, i32 31)

ST_1: p_lshr_cast [1/1] 0.00ns
:3  %p_lshr_cast = zext i29 %tmp_6 to i30

ST_1: p_neg_t [1/1] 2.44ns
:4  %p_neg_t = sub i30 0, %p_lshr_cast

ST_1: tmp_7 [1/1] 0.00ns (grouped into LUT with out node k)
:5  %tmp_7 = call i29 @_ssdm_op_PartSelect.i29.i32.i32.i32(i32 %shift_read, i32 3, i32 31)

ST_1: p_lshr_f_cast [1/1] 0.00ns (grouped into LUT with out node k)
:6  %p_lshr_f_cast = zext i29 %tmp_7 to i30

ST_1: start [1/1] 0.00ns (grouped into LUT with out node k)
:7  %start = select i1 %tmp_16, i30 %p_neg_t, i30 %p_lshr_f_cast

ST_1: start_cast [1/1] 0.00ns (grouped into LUT with out node k)
:8  %start_cast = sext i30 %start to i31

ST_1: tmp_17 [1/1] 0.00ns
:9  %tmp_17 = trunc i32 %shift_read to i3

ST_1: p_and_f [1/1] 0.00ns
:10  %p_and_f = call i32 @_ssdm_op_BitConcatenate.i32.i29.i3(i29 0, i3 %tmp_17)

ST_1: tmp_18 [1/1] 0.00ns
:11  %tmp_18 = trunc i32 %p_neg to i3

ST_1: p_and_t [1/1] 0.00ns
:12  %p_and_t = call i32 @_ssdm_op_BitConcatenate.i32.i29.i3(i29 0, i3 %tmp_18)

ST_1: p_neg_t5 [1/1] 2.44ns
:13  %p_neg_t5 = sub i32 0, %p_and_t

ST_1: outputBit_5 [1/1] 1.37ns
:14  %outputBit_5 = select i1 %tmp_16, i32 %p_neg_t5, i32 %p_and_f

ST_1: k [1/1] 2.44ns (out node of the LUT)
:15  %k = sub i31 255, %start_cast

ST_1: k_cast [1/1] 0.00ns
:16  %k_cast = sext i31 %k to i32

ST_1: stg_31 [1/1] 1.57ns
:17  br label %3


 <State 2>: 3.60ns
ST_2: i_i7 [1/1] 0.00ns
:0  %i_i7 = phi i9 [ 0, %2 ], [ %i_11, %4 ]

ST_2: exitcond_i8 [1/1] 2.03ns
:1  %exitcond_i8 = icmp eq i9 %i_i7, -256

ST_2: empty_71 [1/1] 0.00ns
:2  %empty_71 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)

ST_2: i_11 [1/1] 1.84ns
:3  %i_11 = add i9 %i_i7, 1

ST_2: stg_36 [1/1] 1.57ns
:4  br i1 %exitcond_i8, label %bigint_zero.exit, label %4

ST_2: tmp_i9 [1/1] 0.00ns
:0  %tmp_i9 = zext i9 %i_i7 to i64

ST_2: out_addr_4 [1/1] 0.00ns
:1  %out_addr_4 = getelementptr [256 x i8]* %out_r, i64 0, i64 %tmp_i9

ST_2: stg_39 [1/1] 2.39ns
:2  store i8 0, i8* %out_addr_4, align 1

ST_2: stg_40 [1/1] 0.00ns
:3  br label %3


 <State 3>: 1.57ns
ST_3: i [1/1] 0.00ns
bigint_zero.exit:0  %i = phi i9 [ %i_8, %9 ], [ 255, %3 ]

ST_3: k7 [1/1] 0.00ns
bigint_zero.exit:1  %k7 = phi i32 [ %p_k_1, %9 ], [ %k_cast, %3 ]

ST_3: i_cast [1/1] 0.00ns
bigint_zero.exit:2  %i_cast = sext i9 %i to i32

ST_3: tmp_19 [1/1] 0.00ns
bigint_zero.exit:3  %tmp_19 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %i, i32 8)

ST_3: empty_72 [1/1] 0.00ns
bigint_zero.exit:4  %empty_72 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)

ST_3: stg_46 [1/1] 0.00ns
bigint_zero.exit:5  br i1 %tmp_19, label %.loopexit, label %.preheader.preheader

ST_3: tmp_s [1/1] 0.00ns
.preheader.preheader:0  %tmp_s = zext i32 %i_cast to i64

ST_3: a_addr [1/1] 0.00ns
.preheader.preheader:1  %a_addr = getelementptr [256 x i8]* %a, i64 0, i64 %tmp_s

ST_3: stg_49 [1/1] 1.57ns
.preheader.preheader:2  br label %.preheader

ST_3: stg_50 [1/1] 0.00ns
.loopexit:0  ret void


 <State 4>: 3.89ns
ST_4: j [1/1] 0.00ns
.preheader:0  %j = phi i4 [ %j_9, %8 ], [ 0, %.preheader.preheader ]

ST_4: k_1 [1/1] 0.00ns
.preheader:1  %k_1 = phi i32 [ %k_2, %8 ], [ %k7, %.preheader.preheader ]

ST_4: outputBit [1/1] 0.00ns
.preheader:2  %outputBit = phi i32 [ %outputBit_3, %8 ], [ %outputBit_5, %.preheader.preheader ]

ST_4: j_cast1 [1/1] 0.00ns
.preheader:3  %j_cast1 = zext i4 %j to i8

ST_4: exitcond [1/1] 1.88ns
.preheader:4  %exitcond = icmp eq i4 %j, -8

ST_4: empty_73 [1/1] 0.00ns
.preheader:5  %empty_73 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)

ST_4: j_9 [1/1] 0.80ns
.preheader:6  %j_9 = add i4 %j, 1

ST_4: stg_58 [1/1] 0.00ns
.preheader:7  br i1 %exitcond, label %9, label %5

ST_4: a_load [2/2] 2.39ns
:0  %a_load = load i8* %a_addr, align 1

ST_4: tmp_76 [1/1] 2.52ns
:0  %tmp_76 = icmp eq i32 %outputBit, 8

ST_4: k_6 [1/1] 2.44ns
:1  %k_6 = add nsw i32 %k_1, -1

ST_4: p_k_1 [1/1] 1.37ns
:2  %p_k_1 = select i1 %tmp_76, i32 %k_6, i32 %k_1

ST_4: i_8 [1/1] 1.84ns
:3  %i_8 = add i9 %i, -1

ST_4: stg_64 [1/1] 0.00ns
:4  br label %bigint_zero.exit


 <State 5>: 4.83ns
ST_5: a_load [1/2] 2.39ns
:0  %a_load = load i8* %a_addr, align 1

ST_5: tmp_77 [1/1] 0.00ns (grouped into LUT with out node b)
:1  %tmp_77 = shl i8 1, %j_cast1

ST_5: tmp_78 [1/1] 0.00ns (grouped into LUT with out node b)
:2  %tmp_78 = and i8 %tmp_77, %a_load

ST_5: b [1/1] 2.01ns (out node of the LUT)
:3  %b = lshr i8 %tmp_78, %j_cast1

ST_5: tmp_79 [1/1] 2.52ns
:4  %tmp_79 = icmp eq i32 %outputBit, 8

ST_5: stg_70 [1/1] 0.00ns
:5  br i1 %tmp_79, label %6, label %7

ST_5: tmp_83 [1/1] 0.00ns
:2  %tmp_83 = sext i32 %k_1 to i64

ST_5: out_addr_2 [1/1] 0.00ns
:3  %out_addr_2 = getelementptr [256 x i8]* %out_r, i64 0, i64 %tmp_83

ST_5: out_load_2 [2/2] 2.39ns
:4  %out_load_2 = load i8* %out_addr_2, align 1

ST_5: k_7 [1/1] 2.44ns
:0  %k_7 = add nsw i32 %k_1, -1

ST_5: tmp_80 [1/1] 0.00ns
:1  %tmp_80 = sext i32 %k_7 to i64

ST_5: out_addr [1/1] 0.00ns
:2  %out_addr = getelementptr [256 x i8]* %out_r, i64 0, i64 %tmp_80

ST_5: out_load [2/2] 2.39ns
:3  %out_load = load i8* %out_addr, align 1


 <State 6>: 6.79ns
ST_6: tmp_20 [1/1] 0.00ns (grouped into LUT with out node tmp_84)
:0  %tmp_20 = trunc i32 %outputBit to i8

ST_6: tmp_82 [1/1] 0.00ns (grouped into LUT with out node tmp_84)
:1  %tmp_82 = shl i8 %b, %tmp_20

ST_6: out_load_2 [1/2] 2.39ns
:4  %out_load_2 = load i8* %out_addr_2, align 1

ST_6: tmp_84 [1/1] 2.01ns (out node of the LUT)
:5  %tmp_84 = add i8 %tmp_82, %out_load_2

ST_6: stg_82 [1/1] 2.39ns
:6  store i8 %tmp_84, i8* %out_addr_2, align 1

ST_6: stg_83 [1/1] 1.57ns
:7  br label %8

ST_6: out_load [1/2] 2.39ns
:3  %out_load = load i8* %out_addr, align 1

ST_6: tmp_81 [1/1] 1.72ns
:4  %tmp_81 = add i8 %out_load, %b

ST_6: stg_86 [1/1] 2.39ns
:5  store i8 %tmp_81, i8* %out_addr, align 1

ST_6: stg_87 [1/1] 1.57ns
:6  br label %8

ST_6: k_2 [1/1] 0.00ns
:0  %k_2 = phi i32 [ %k_7, %6 ], [ %k_1, %7 ]

ST_6: outputBit_1 [1/1] 0.00ns (grouped into LUT with out node outputBit_3)
:1  %outputBit_1 = phi i32 [ 0, %6 ], [ %outputBit, %7 ]

ST_6: outputBit_3 [1/1] 2.44ns (out node of the LUT)
:2  %outputBit_3 = add nsw i32 %outputBit_1, 1

ST_6: stg_91 [1/1] 0.00ns
:3  br label %.preheader


 <State 7>: 2.39ns
ST_7: i_i [1/1] 0.00ns
.preheader10:0  %i_i = phi i9 [ %i_10, %1 ], [ 0, %0 ]

ST_7: exitcond_i [1/1] 2.03ns
.preheader10:1  %exitcond_i = icmp eq i9 %i_i, -256

ST_7: empty_70 [1/1] 0.00ns
.preheader10:2  %empty_70 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)

ST_7: i_10 [1/1] 1.84ns
.preheader10:3  %i_10 = add i9 %i_i, 1

ST_7: stg_96 [1/1] 0.00ns
.preheader10:4  br i1 %exitcond_i, label %.loopexit, label %1

ST_7: tmp_i [1/1] 0.00ns
:0  %tmp_i = zext i9 %i_i to i64

ST_7: a_addr_1 [1/1] 0.00ns
:1  %a_addr_1 = getelementptr [256 x i8]* %a, i64 0, i64 %tmp_i

ST_7: a_load_1 [2/2] 2.39ns
:2  %a_load_1 = load i8* %a_addr_1, align 1


 <State 8>: 4.78ns
ST_8: a_load_1 [1/2] 2.39ns
:2  %a_load_1 = load i8* %a_addr_1, align 1

ST_8: out_addr_3 [1/1] 0.00ns
:3  %out_addr_3 = getelementptr [256 x i8]* %out_r, i64 0, i64 %tmp_i

ST_8: stg_102 [1/1] 2.39ns
:4  store i8 %a_load_1, i8* %out_addr_3, align 1

ST_8: stg_103 [1/1] 0.00ns
:5  br label %.preheader10



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 50ns, clock uncertainty: 6.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
