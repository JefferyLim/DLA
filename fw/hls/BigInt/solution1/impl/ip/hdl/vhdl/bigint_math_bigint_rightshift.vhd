-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bigint_math_bigint_rightshift is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of bigint_math_bigint_rightshift is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_23 : BOOLEAN;
    signal i_5_fu_186_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_47 : BOOLEAN;
    signal i_3_fu_203_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_3_reg_335 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_56 : BOOLEAN;
    signal a_addr_reg_340 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_214_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast_reg_345 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_71 : BOOLEAN;
    signal p_k_1_fu_238_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_218_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_fu_257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_359 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_86 : BOOLEAN;
    signal tmp_17_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_365 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_addr_1_reg_369 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_4_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_4_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_addr_reg_379 : STD_LOGIC_VECTOR (7 downto 0);
    signal outputBit_2_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_107 : BOOLEAN;
    signal j_4_fu_318_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_i_reg_88 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_i_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_99 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_reg_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_122 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_phi_fu_161_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputBit_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputBit_1_phi_fu_172_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_293_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_305_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_246_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_251_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_284_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_288_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_300_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_i_fu_180_p2))) then 
                i_i_reg_88 <= i_5_fu_186_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_i_reg_88 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_i_fu_180_p2)))) then 
                i_reg_99 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_4_fu_218_p3)))) then 
                i_reg_99 <= i_3_reg_335;
            end if; 
        end if;
    end process;

    j_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                j_reg_122 <= j_4_fu_318_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_197_p2 = ap_const_lv1_0))) then 
                j_reg_122 <= ap_const_lv4_7;
            end if; 
        end if;
    end process;

    k_1_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                k_1_reg_134 <= k_2_phi_fu_161_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_197_p2 = ap_const_lv1_0))) then 
                k_1_reg_134 <= k_reg_110;
            end if; 
        end if;
    end process;

    k_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_i_fu_180_p2)))) then 
                k_reg_110 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_4_fu_218_p3)))) then 
                k_reg_110 <= p_k_1_fu_238_p3;
            end if; 
        end if;
    end process;

    outputBit_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                outputBit_reg_145 <= outputBit_2_fu_312_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_197_p2 = ap_const_lv1_0))) then 
                outputBit_reg_145 <= ap_const_lv32_6;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_197_p2 = ap_const_lv1_0))) then
                a_addr_reg_340 <= tmp_fu_209_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                b_reg_359 <= b_fu_257_p2;
                tmp_17_reg_365 <= tmp_17_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_3_reg_335 <= i_3_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_cast_reg_345 <= j_cast_fu_214_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_17_fu_262_p2)))) then
                k_4_reg_374 <= k_4_fu_273_p2;
                out_addr_reg_379 <= tmp_18_fu_279_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_17_fu_262_p2))) then
                out_addr_1_reg_369 <= tmp_21_fu_268_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_197_p2, tmp_4_fu_218_p3, exitcond_i_fu_180_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond_i_fu_180_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond_fu_197_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = tmp_4_fu_218_p3))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a_address0 <= a_addr_reg_340;

    a_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_197_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond_fu_197_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_197_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond_fu_197_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_107_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_107 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_47_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_47 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_56_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_56 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_71_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_71 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_86_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_86 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_23)
    begin
        if (ap_sig_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_47)
    begin
        if (ap_sig_47) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_56)
    begin
        if (ap_sig_56) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_71)
    begin
        if (ap_sig_71) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_86)
    begin
        if (ap_sig_86) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_107)
    begin
        if (ap_sig_107) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    b_fu_257_p2 <= std_logic_vector(shift_right(unsigned(tmp_16_fu_251_p2),to_integer(unsigned('0' & j_cast_reg_345(8-1 downto 0)))));
    exitcond_fu_197_p2 <= "1" when (i_reg_99 = ap_const_lv9_100) else "0";
    exitcond_i_fu_180_p2 <= "1" when (i_i_reg_88 = ap_const_lv9_100) else "0";
    i_3_fu_203_p2 <= std_logic_vector(unsigned(i_reg_99) + unsigned(ap_const_lv9_1));
    i_5_fu_186_p2 <= std_logic_vector(unsigned(i_i_reg_88) + unsigned(ap_const_lv9_1));
    j_4_fu_318_p2 <= std_logic_vector(unsigned(j_reg_122) + unsigned(ap_const_lv4_F));
        j_cast_fu_214_p1 <= std_logic_vector(resize(signed(j_reg_122),8));


    k_2_phi_fu_161_p4_assign_proc : process(tmp_17_reg_365, k_4_reg_374, ap_sig_cseq_ST_st6_fsm_5, k_1_reg_134)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
            if ((ap_const_lv1_0 = tmp_17_reg_365)) then 
                k_2_phi_fu_161_p4 <= k_1_reg_134;
            elsif (not((ap_const_lv1_0 = tmp_17_reg_365))) then 
                k_2_phi_fu_161_p4 <= k_4_reg_374;
            else 
                k_2_phi_fu_161_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            k_2_phi_fu_161_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    k_3_fu_232_p2 <= std_logic_vector(unsigned(k_1_reg_134) + unsigned(ap_const_lv32_1));
    k_4_fu_273_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(k_1_reg_134));

    out_r_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4, tmp_17_fu_262_p2, tmp_17_reg_365, out_addr_1_reg_369, out_addr_reg_379, ap_sig_cseq_ST_st6_fsm_5, tmp_i_fu_192_p1, tmp_21_fu_268_p1, tmp_18_fu_279_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_17_reg_365)))) then 
            out_r_address0 <= out_addr_reg_379;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_17_reg_365))) then 
            out_r_address0 <= out_addr_1_reg_369;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            out_r_address0 <= tmp_i_fu_192_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_17_fu_262_p2)))) then 
            out_r_address0 <= tmp_18_fu_279_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_17_fu_262_p2))) then 
            out_r_address0 <= tmp_21_fu_268_p1(8 - 1 downto 0);
        else 
            out_r_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4, tmp_17_fu_262_p2, tmp_17_reg_365, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_17_fu_262_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_17_fu_262_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_17_reg_365))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_17_reg_365)))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_17_reg_365, ap_sig_cseq_ST_st6_fsm_5, tmp_22_fu_293_p2, tmp_19_fu_305_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_17_reg_365)))) then 
            out_r_d0 <= tmp_19_fu_305_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_17_reg_365))) then 
            out_r_d0 <= tmp_22_fu_293_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            out_r_d0 <= ap_const_lv8_0;
        else 
            out_r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    out_r_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_17_reg_365, ap_sig_cseq_ST_st6_fsm_5, exitcond_i_fu_180_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_i_fu_180_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_17_reg_365))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_17_reg_365)))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    outputBit_1_phi_fu_172_p4_assign_proc : process(tmp_17_reg_365, ap_sig_cseq_ST_st6_fsm_5, outputBit_reg_145)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
            if ((ap_const_lv1_0 = tmp_17_reg_365)) then 
                outputBit_1_phi_fu_172_p4 <= outputBit_reg_145;
            elsif (not((ap_const_lv1_0 = tmp_17_reg_365))) then 
                outputBit_1_phi_fu_172_p4 <= ap_const_lv32_7;
            else 
                outputBit_1_phi_fu_172_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            outputBit_1_phi_fu_172_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    outputBit_2_fu_312_p2 <= std_logic_vector(unsigned(outputBit_1_phi_fu_172_p4) + unsigned(ap_const_lv32_FFFFFFFF));
    p_k_1_fu_238_p3 <= 
        k_3_fu_232_p2 when (tmp_s_fu_226_p2(0) = '1') else 
        k_1_reg_134;
    tmp_15_fu_246_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & j_cast_reg_345(8-1 downto 0)))));
    tmp_16_fu_251_p2 <= (tmp_15_fu_246_p2 and a_q0);
    tmp_17_fu_262_p2 <= "1" when (outputBit_reg_145 = ap_const_lv32_FFFFFFFF) else "0";
        tmp_18_fu_279_p1 <= std_logic_vector(resize(signed(k_4_fu_273_p2),64));

    tmp_19_fu_305_p2 <= std_logic_vector(unsigned(out_r_q0) + unsigned(tmp_5_fu_300_p2));
    tmp_20_fu_288_p2 <= std_logic_vector(shift_left(unsigned(b_reg_359),to_integer(unsigned('0' & tmp_6_fu_284_p1(8-1 downto 0)))));
        tmp_21_fu_268_p1 <= std_logic_vector(resize(signed(k_1_reg_134),64));

    tmp_22_fu_293_p2 <= std_logic_vector(unsigned(tmp_20_fu_288_p2) + unsigned(out_r_q0));
    tmp_4_fu_218_p3 <= j_reg_122(3 downto 3);
    tmp_5_fu_300_p2 <= std_logic_vector(shift_left(unsigned(b_reg_359),to_integer(unsigned('0' & ap_const_lv8_7(8-1 downto 0)))));
    tmp_6_fu_284_p1 <= outputBit_reg_145(8 - 1 downto 0);
    tmp_fu_209_p1 <= std_logic_vector(resize(unsigned(i_reg_99),64));
    tmp_i_fu_192_p1 <= std_logic_vector(resize(unsigned(i_i_reg_88),64));
    tmp_s_fu_226_p2 <= "1" when (outputBit_reg_145 = ap_const_lv32_0) else "0";
end behav;
