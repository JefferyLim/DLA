-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bigint_math is
generic (
    C_S_AXI_PERIPH_BUS_ADDR_WIDTH : INTEGER := 11;
    C_S_AXI_PERIPH_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_PERIPH_BUS_AWVALID : IN STD_LOGIC;
    s_axi_PERIPH_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_PERIPH_BUS_WVALID : IN STD_LOGIC;
    s_axi_PERIPH_BUS_WREADY : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_DATA_WIDTH-1 downto 0);
    s_axi_PERIPH_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_PERIPH_BUS_ARVALID : IN STD_LOGIC;
    s_axi_PERIPH_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_PERIPH_BUS_RVALID : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_RREADY : IN STD_LOGIC;
    s_axi_PERIPH_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_DATA_WIDTH-1 downto 0);
    s_axi_PERIPH_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_PERIPH_BUS_BVALID : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_BREADY : IN STD_LOGIC;
    s_axi_PERIPH_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of bigint_math is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bigint_math,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.370000,HLS_SYN_LAT=522,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=40152,HLS_SYN_LUT=10448}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2048_lc_1 : STD_LOGIC_VECTOR (2047 downto
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_29 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal number1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal number1_ce0 : STD_LOGIC;
    signal number1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal number2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal number2_ce0 : STD_LOGIC;
    signal number2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_V_ap_vld : STD_LOGIC;
    signal i_1_fu_122_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_165 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_91 : BOOLEAN;
    signal exitcond_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_134_p1 : STD_LOGIC_VECTOR (2039 downto 0);
    signal tmp_reg_180 : STD_LOGIC_VECTOR (2039 downto 0);
    signal tmp_2_fu_138_p1 : STD_LOGIC_VECTOR (2039 downto 0);
    signal tmp_2_reg_185 : STD_LOGIC_VECTOR (2039 downto 0);
    signal temp1_V_fu_148_p3 : STD_LOGIC_VECTOR (2047 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_112 : BOOLEAN;
    signal temp2_V_fu_155_p3 : STD_LOGIC_VECTOR (2047 downto 0);
    signal grp_fu_142_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal output_V_assign_reg_200 : STD_LOGIC_VECTOR (2047 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_123 : BOOLEAN;
    signal p_Repl2_3_reg_81 : STD_LOGIC_VECTOR (2047 downto 0);
    signal p_Repl2_1_reg_93 : STD_LOGIC_VECTOR (2047 downto 0);
    signal i_reg_105 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_142 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component bigint_math_add_2048ns_2048ns_2048_9 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2047 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2047 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2047 downto 0) );
    end component;


    component bigint_math_PERIPH_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        number1_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        number1_ce0 : IN STD_LOGIC;
        number1_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        number2_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        number2_ce0 : IN STD_LOGIC;
        number2_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_V : IN STD_LOGIC_VECTOR (2047 downto 0);
        output_V_ap_vld : IN STD_LOGIC );
    end component;



begin
    bigint_math_PERIPH_BUS_s_axi_U : component bigint_math_PERIPH_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_PERIPH_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_PERIPH_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_PERIPH_BUS_AWVALID,
        AWREADY => s_axi_PERIPH_BUS_AWREADY,
        AWADDR => s_axi_PERIPH_BUS_AWADDR,
        WVALID => s_axi_PERIPH_BUS_WVALID,
        WREADY => s_axi_PERIPH_BUS_WREADY,
        WDATA => s_axi_PERIPH_BUS_WDATA,
        WSTRB => s_axi_PERIPH_BUS_WSTRB,
        ARVALID => s_axi_PERIPH_BUS_ARVALID,
        ARREADY => s_axi_PERIPH_BUS_ARREADY,
        ARADDR => s_axi_PERIPH_BUS_ARADDR,
        RVALID => s_axi_PERIPH_BUS_RVALID,
        RREADY => s_axi_PERIPH_BUS_RREADY,
        RDATA => s_axi_PERIPH_BUS_RDATA,
        RRESP => s_axi_PERIPH_BUS_RRESP,
        BVALID => s_axi_PERIPH_BUS_BVALID,
        BREADY => s_axi_PERIPH_BUS_BREADY,
        BRESP => s_axi_PERIPH_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        number1_address0 => number1_address0,
        number1_ce0 => number1_ce0,
        number1_q0 => number1_q0,
        number2_address0 => number2_address0,
        number2_ce0 => number2_ce0,
        number2_q0 => number2_q0,
        output_V => output_V_assign_reg_200,
        output_V_ap_vld => output_V_ap_vld);

    bigint_math_add_2048ns_2048ns_2048_9_U1 : component bigint_math_add_2048ns_2048ns_2048_9
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 2048,
        din1_WIDTH => 2048,
        dout_WIDTH => 2048)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_Repl2_3_reg_81,
        din1 => p_Repl2_1_reg_93,
        ce => ap_const_logic_1,
        dout => grp_fu_142_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                i_reg_105 <= i_1_reg_165;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_105 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_Repl2_1_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                p_Repl2_1_reg_93 <= temp1_V_fu_148_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_Repl2_1_reg_93 <= ap_const_lv2048_lc_1;
            end if; 
        end if;
    end process;

    p_Repl2_3_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                p_Repl2_3_reg_81 <= temp2_V_fu_155_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_Repl2_3_reg_81 <= ap_const_lv2048_lc_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_165 <= i_1_fu_122_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                output_V_assign_reg_200 <= grp_fu_142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_116_p2 = ap_const_lv1_0))) then
                tmp_2_reg_185 <= tmp_2_fu_138_p1;
                tmp_reg_180 <= tmp_fu_134_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_116_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_116_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_112 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_123 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_142 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_29_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_29 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_91_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_91 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_123)
    begin
        if (ap_sig_123) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_142)
    begin
        if (ap_sig_142) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_29)
    begin
        if (ap_sig_29) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_91)
    begin
        if (ap_sig_91) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_112)
    begin
        if (ap_sig_112) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_116_p2 <= "1" when (i_reg_105 = ap_const_lv9_100) else "0";
    i_1_fu_122_p2 <= std_logic_vector(unsigned(i_reg_105) + unsigned(ap_const_lv9_1));
    number1_address0 <= tmp_1_fu_128_p1(8 - 1 downto 0);

    number1_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            number1_ce0 <= ap_const_logic_1;
        else 
            number1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    number2_address0 <= tmp_1_fu_128_p1(8 - 1 downto 0);

    number2_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            number2_ce0 <= ap_const_logic_1;
        else 
            number2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            output_V_ap_vld <= ap_const_logic_1;
        else 
            output_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp1_V_fu_148_p3 <= (tmp_reg_180 & number1_q0);
    temp2_V_fu_155_p3 <= (tmp_2_reg_185 & number2_q0);
    tmp_1_fu_128_p1 <= std_logic_vector(resize(unsigned(i_reg_105),64));
    tmp_2_fu_138_p1 <= p_Repl2_3_reg_81(2040 - 1 downto 0);
    tmp_fu_134_p1 <= p_Repl2_1_reg_93(2040 - 1 downto 0);
end behav;
