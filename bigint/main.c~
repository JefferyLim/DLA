#include <stdio.h>
#include <gmp.h>

#define inBit 128	
#define outBit 256

void bigint_print(unsigned char in[], int inL);
void bigint_zero(unsigned char in[], int inL);
void bigint_add(unsigned char out[], unsigned char a[], unsigned char b[], int outL, int aL, int bL);

int bigint_sub(unsigned char out[], unsigned char a[], unsigned char b[], int outL, int aL, int bL);

void bigint_mul(unsigned char out[], unsigned char a[], unsigned char b[], int outL, int aL, int bL);

void bigint_div(unsigned char out[], unsigned char out1[], unsigned char a[], unsigned char b[], int outL, int out1L, int aL, int bL);

void bigint_modexp(unsigned char out[], unsigned char base[], unsigned char exp[], unsigned char mod[], int outL, int baseL, int expL, int modL );

int bigint_isEqual(unsigned char a[], unsigned char b[], int aL, int bL);
int bigint_compare(unsigned char a[], unsigned char b[], int aL, int bL);

int main(){	
	unsigned char a[inBit];
	unsigned char b[inBit];

	unsigned int u;
	unsigned char buff[outBit];
	int i;
	
	mpz_t a1, b1, c1, d1, q1;

	mpz_init(c1);

	bigint_zero(a, inBit);
	bigint_zero(b, inBit);

	FILE *fp;

	fp = fopen("a.txt", "r");
	i=0;
	while(fscanf(fp, "%2x", &u) == 1){ 
		a[i] = u;		
		i++;
	}

	fseek(fp, 0, SEEK_SET);
	fscanf(fp, "%s", buff);
	mpz_init_set_str(a1,buff, 16);
	
	fclose(fp);

	fp = fopen("b.txt", "r");

	i=0;
	while(fscanf(fp, "%2x", &u) == 1){ 
		b[i] = u;
		i++;
	}

	fseek(fp, 0, SEEK_SET);
	fscanf(fp, "%s", buff);
	mpz_init_set_str(b1,buff, 16);
	fclose(fp);

	
	
	printf("Addition Test: ");
	bigint_print(a, inBit);printf(" + ");
	bigint_print(b, inBit);printf(" = ");

	unsigned char sum[outBit];
	bigint_add(sum, a, b, outBit, inBit, inBit);
	bigint_print(sum, outBit);printf("\n");

	printf("Subtraction Test: ");
	bigint_print(a, inBit);printf(" - ");
	bigint_print(b, inBit);printf(" = ");

	unsigned char diff[outBit];
	bigint_sub(diff, a, b, outBit, inBit, inBit);
	bigint_print(diff, outBit);printf("\n");

	printf("Multiplication Test: ");
	bigint_print(a, inBit);printf(" * ");
	bigint_print(b, inBit);printf(" = ");

	unsigned char prod[outBit];
	bigint_mul(prod, a, b, outBit, inBit, inBit);
	bigint_print(prod, outBit);printf("\n");


	return 0;
	
}

void bigint_print(unsigned char in[], int inL){
	int i;
	int leadingZeroFlag = 0;

	if(in[0] == 0){
		leadingZeroFlag = 1;
	}
	
	for(i = 0; i < inL; i++){
		if(in[i] != 0){
			leadingZeroFlag = 0;
		}

		if(!leadingZeroFlag){
			printf("%02x", in[i]);
		}
	}
}


int bigint_isEqual(unsigned char a[], unsigned char b[], int aL, int bL){
	int i;

	if (aL > bL){
		for(i = 0; i < (aL - bL); i++){
			if(a[i] != 0){
				return 0;
			}
		}

		for(i = 0; i < bL; i++){
			if(a[i] != b[i]){
				return 0;
			}
		}
	}else if(aL < bL){
		for(i = 0; i < (bL - aL); i++){
			if(b[i] != 0){
				return 0;
			}
		}

		for(i = 0; i < aL; i++){
			if(a[i] != b[i]){
				return 0;
			}
		}
	}else{

		for(i = 0; i < aL; i++){
			if(a[i] != b[i]){
				return 0;
			}
		}
	}

	return 1;

}


int bigint_compare(unsigned char a[], unsigned char b[], int aL, int bL){
	
}

void bigint_zero(unsigned char in[], int inL){
	int i;	
	for(i = 0; i < inL; i++){
		in[i] = 0;
	}

}


void bigint_add(unsigned char out[], unsigned char a[], unsigned char b[], int outL, int aL, int bL){
	//Local Var
	unsigned char sum;
	unsigned char carry;

	int i = 0;
	
	unsigned char tempA[outL];
	unsigned char tempB[outL];
	
	//Zeroing output and variables
	bigint_zero(tempA, outL);
	bigint_zero(tempB, outL);
	bigint_zero(out, outL);
	
	//Copying inputs to local variables
	for(i = (outL-aL); i < outL; i++){
		tempA[i] = a[i - (outL-aL)];
	}

	for(i = (outL-bL); i < outL; i++){
		tempB[i] = b[i - (outL-bL)];
	}


	for(i = outL-1; i >= 0; i--){
		//Sum and Carry
		sum = tempA[i] + tempB[i];
		carry = (tempA[i] + tempB[i]) >> 8;

		//Overflow
		if(out[i] + sum > 0xFF){
			out[i-1] += ((out[i] + sum) >> 8);
		}				
		out[i] += sum;		
		
		//Overflow
		if(out[i-1] + carry > 0xFF){
			out[i-2] += ((out[i-1] + carry) >> 8);
		}		 
		out[i-1] += carry;
	}
}


//a - b
int bigint_sub(unsigned char out[], unsigned char a[], unsigned char b[], int outL, int aL, int bL){
	
	//Counter to iterate through multiplication table
	int i = 0;
	int j = 0;

	//Keeps track of output array
	int k = 0;

	unsigned char tempA[outL];
	unsigned char tempB[outL];

	unsigned char carry[outL];
	
	bigint_zero(tempA, outL);
	bigint_zero(tempB, outL);

	bigint_zero(carry, outL);
	bigint_zero(out, outL);

	for(i = (outL-aL); i < outL; i++){
		tempA[i] = a[i - (outL-aL)];
	}

	for(i = (outL-bL); i < outL; i++){
		tempB[i] = b[i - (outL-bL)];
	}

	for(i = outL-1; i >= 0; i--){
		if(tempA[i] < tempB[i]){
			if(tempA[i-1] == 0){
				j = i-1;
				while(tempA[j] == 0){
					j--;
					if(j == -1){
						return -1;
					}
				}

				tempA[j] -= 1;
				j++;
				while(j != i-1){
					tempA[j] = 0xFF;
					j++;
				}
				
				tempA[i-1] = 0xFF;
				carry[i] += 1;
							
			}else{	
				tempA[i-1] -= 1;
				carry[i] += 1;
			}		
		}

		out[i] = ((carry[i] << 16) + tempA[i]) - tempB[i];					
	}

	return 1;
}



