-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bigint_math is
generic (
    C_S_AXI_PERIPH_BUS_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_PERIPH_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_PERIPH_BUS_AWVALID : IN STD_LOGIC;
    s_axi_PERIPH_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_PERIPH_BUS_WVALID : IN STD_LOGIC;
    s_axi_PERIPH_BUS_WREADY : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_DATA_WIDTH-1 downto 0);
    s_axi_PERIPH_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_PERIPH_BUS_ARVALID : IN STD_LOGIC;
    s_axi_PERIPH_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_PERIPH_BUS_RVALID : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_RREADY : IN STD_LOGIC;
    s_axi_PERIPH_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_PERIPH_BUS_DATA_WIDTH-1 downto 0);
    s_axi_PERIPH_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_PERIPH_BUS_BVALID : OUT STD_LOGIC;
    s_axi_PERIPH_BUS_BREADY : IN STD_LOGIC;
    s_axi_PERIPH_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of bigint_math is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bigint_math,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.100000,HLS_SYN_LAT=4295081860,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=2,HLS_SYN_FF=6544,HLS_SYN_LUT=6590}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2048_lc_1 : STD_LOGIC_VECTOR (2047 downto
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_29 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal a_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_ce0 : STD_LOGIC;
    signal b_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_V_ap_vld : STD_LOGIC;
    signal c_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_207 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_91 : BOOLEAN;
    signal c_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_99 : BOOLEAN;
    signal i_2_fu_218_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_reg_432 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_108 : BOOLEAN;
    signal exitcond1_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_235_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_123 : BOOLEAN;
    signal b_load_reg_447 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_cast_fu_241_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_cast_reg_452 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_1_fu_251_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_reg_460 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_135 : BOOLEAN;
    signal exitcond2_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_load_reg_470 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_148 : BOOLEAN;
    signal c_addr_1_reg_476 : STD_LOGIC_VECTOR (7 downto 0);
    signal prod_fu_273_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal prod_reg_482 : STD_LOGIC_VECTOR (7 downto 0);
    signal carry_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_309_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_2_reg_497 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_fu_341_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_reg_502 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_170 : BOOLEAN;
    signal c_addr_3_reg_507 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_365_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_4_reg_516 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_188 : BOOLEAN;
    signal exitcond_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_412_p1 : STD_LOGIC_VECTOR (2039 downto 0);
    signal tmp_2_reg_530 : STD_LOGIC_VECTOR (2039 downto 0);
    signal i_1_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_V_fu_422_p3 : STD_LOGIC_VECTOR (2047 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_204 : BOOLEAN;
    signal c_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal c_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_ce1 : STD_LOGIC;
    signal c_we1 : STD_LOGIC;
    signal c_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_151 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_163 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_234 : BOOLEAN;
    signal k1_reg_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_1_reg_184 : STD_LOGIC_VECTOR (2047 downto 0);
    signal i1_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_261 : BOOLEAN;
    signal tmp_11_fu_328_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_388_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_335_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_395_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_224_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_cast_fu_241_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_280_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_280_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_280_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_cast_fu_299_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_cast_fu_295_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_303_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_cast_fu_356_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_cast_fu_352_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_fu_359_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k1_cast_fu_373_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_377_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_280_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component bigint_math_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component bigint_math_PERIPH_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        a_ce0 : IN STD_LOGIC;
        a_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        b_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        b_ce0 : IN STD_LOGIC;
        b_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_V : IN STD_LOGIC_VECTOR (2047 downto 0);
        output_V_ap_vld : IN STD_LOGIC );
    end component;



begin
    bigint_math_PERIPH_BUS_s_axi_U : component bigint_math_PERIPH_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_PERIPH_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_PERIPH_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_PERIPH_BUS_AWVALID,
        AWREADY => s_axi_PERIPH_BUS_AWREADY,
        AWADDR => s_axi_PERIPH_BUS_AWADDR,
        WVALID => s_axi_PERIPH_BUS_WVALID,
        WREADY => s_axi_PERIPH_BUS_WREADY,
        WDATA => s_axi_PERIPH_BUS_WDATA,
        WSTRB => s_axi_PERIPH_BUS_WSTRB,
        ARVALID => s_axi_PERIPH_BUS_ARVALID,
        ARREADY => s_axi_PERIPH_BUS_ARREADY,
        ARADDR => s_axi_PERIPH_BUS_ARADDR,
        RVALID => s_axi_PERIPH_BUS_RVALID,
        RREADY => s_axi_PERIPH_BUS_RREADY,
        RDATA => s_axi_PERIPH_BUS_RDATA,
        RRESP => s_axi_PERIPH_BUS_RRESP,
        BVALID => s_axi_PERIPH_BUS_BVALID,
        BREADY => s_axi_PERIPH_BUS_BREADY,
        BRESP => s_axi_PERIPH_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a_address0 => a_address0,
        a_ce0 => a_ce0,
        a_q0 => a_q0,
        b_address0 => b_address0,
        b_ce0 => b_ce0,
        b_q0 => b_q0,
        output_V => p_Repl2_1_reg_184,
        output_V_ap_vld => output_V_ap_vld);

    c_U : component bigint_math_c
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => c_d0,
        q0 => c_q0,
        address1 => c_address1,
        ce1 => c_ce1,
        we1 => c_we1,
        d1 => c_d1,
        q1 => c_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_212_p2 = ap_const_lv1_0)))) then 
                i1_reg_196 <= ap_const_lv32_FF;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                i1_reg_196 <= i_1_reg_535;
            end if; 
        end if;
    end process;

    i_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond2_fu_245_p2)))) then 
                i_reg_151 <= i_2_reg_432;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_151 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                j_reg_163 <= j_1_reg_460;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                j_reg_163 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    k1_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                k1_reg_174 <= k_1_reg_502;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                k1_reg_174 <= k_fu_235_p2;
            end if; 
        end if;
    end process;

    p_Repl2_1_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_212_p2 = ap_const_lv1_0)))) then 
                p_Repl2_1_reg_184 <= ap_const_lv2048_lc_1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                p_Repl2_1_reg_184 <= temp1_V_fu_422_p3;
            end if; 
        end if;
    end process;

    reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                reg_207 <= c_q1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                reg_207 <= c_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                a_load_reg_470 <= a_q0;
                c_addr_1_reg_476 <= tmp_5_fu_268_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                b_load_reg_447 <= b_q0;
                    tmp_2_cast_reg_452(7 downto 0) <= tmp_2_cast_fu_241_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_9_fu_309_p3)))) then
                c_addr_2_reg_497 <= tmp_10_fu_323_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                c_addr_3_reg_507 <= tmp_13_fu_347_p1(8 - 1 downto 0);
                k_1_reg_502 <= k_1_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = tmp_15_fu_365_p3)))) then
                c_addr_4_reg_516 <= tmp_17_fu_383_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                carry_reg_487 <= tmp_s_fu_280_p2(15 downto 8);
                prod_reg_482 <= prod_fu_273_p2;
                tmp_9_reg_493 <= tmp_8_fu_303_p2(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = exitcond_fu_401_p2))) then
                i_1_reg_535 <= i_1_fu_416_p2;
                tmp_2_reg_530 <= tmp_2_fu_412_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_2_reg_432 <= i_2_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_1_reg_460 <= j_1_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_15_reg_512 <= tmp_14_fu_359_p2(8 downto 8);
            end if;
        end if;
    end process;
    tmp_2_cast_reg_452(15 downto 8) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_212_p2, exitcond2_fu_245_p2, exitcond_fu_401_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_212_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond2_fu_245_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_lv1_0 = exitcond_fu_401_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    a_address0 <= tmp_7_fu_263_p1(7 - 1 downto 0);

    a_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, exitcond_fu_401_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond_fu_401_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, exitcond_fu_401_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond_fu_401_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_108_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_108 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_123 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_135 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_148 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_170_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_170 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_188_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_188 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_204_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_204 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_234_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_234 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_261_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_261 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_29_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_29 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_91_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_91 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_99_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_99 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_234)
    begin
        if (ap_sig_234) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_188)
    begin
        if (ap_sig_188) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_204)
    begin
        if (ap_sig_204) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_29)
    begin
        if (ap_sig_29) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_108)
    begin
        if (ap_sig_108) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_123)
    begin
        if (ap_sig_123) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_135)
    begin
        if (ap_sig_135) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_148)
    begin
        if (ap_sig_148) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_91)
    begin
        if (ap_sig_91) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_261)
    begin
        if (ap_sig_261) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_170)
    begin
        if (ap_sig_170) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_99)
    begin
        if (ap_sig_99) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= tmp_1_fu_230_p1(7 - 1 downto 0);

    b_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st5_fsm_4, c_addr_2_reg_497, c_addr_4_reg_516, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st10_fsm_9, tmp_5_fu_268_p1, tmp_10_fu_323_p1, tmp_3_fu_407_p1, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            c_address0 <= c_addr_4_reg_516;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            c_address0 <= c_addr_2_reg_497;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            c_address0 <= tmp_3_fu_407_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            c_address0 <= tmp_10_fu_323_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            c_address0 <= tmp_5_fu_268_p1(8 - 1 downto 0);
        else 
            c_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c_address1_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, c_addr_1_reg_476, ap_sig_cseq_ST_st8_fsm_7, c_addr_3_reg_507, ap_sig_cseq_ST_st10_fsm_9, tmp_13_fu_347_p1, tmp_17_fu_383_p1, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            c_address1 <= c_addr_3_reg_507;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            c_address1 <= c_addr_1_reg_476;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            c_address1 <= tmp_17_fu_383_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            c_address1 <= tmp_13_fu_347_p1(8 - 1 downto 0);
        else 
            c_address1 <= "XXXXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_ce1_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            c_ce1 <= ap_const_logic_1;
        else 
            c_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    c_d0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st7_fsm_6, tmp_11_fu_328_p2, tmp_18_fu_388_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            c_d0 <= tmp_18_fu_388_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            c_d0 <= tmp_11_fu_328_p2;
        else 
            c_d0 <= "XXXXXXXX";
        end if; 
    end process;


    c_d1_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st7_fsm_6, tmp_12_fu_335_p2, tmp_19_fu_395_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            c_d1 <= tmp_19_fu_395_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            c_d1 <= tmp_12_fu_335_p2;
        else 
            c_d1 <= "XXXXXXXX";
        end if; 
    end process;


    c_we0_assign_proc : process(tmp_9_reg_493, tmp_15_reg_512, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_9_reg_493))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = tmp_15_reg_512))))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_we1_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            c_we1 <= ap_const_logic_1;
        else 
            c_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_212_p2 <= "1" when (i_reg_151 = ap_const_lv8_80) else "0";
    exitcond2_fu_245_p2 <= "1" when (j_reg_163 = ap_const_lv8_80) else "0";
    exitcond_fu_401_p2 <= "1" when (i1_reg_196 = ap_const_lv32_80000000) else "0";
    i_1_fu_416_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i1_reg_196));
    i_2_fu_218_p2 <= std_logic_vector(unsigned(i_reg_151) + unsigned(ap_const_lv8_1));
    j_1_fu_251_p2 <= std_logic_vector(unsigned(j_reg_163) + unsigned(ap_const_lv8_1));
    k1_cast_fu_373_p1 <= std_logic_vector(resize(unsigned(k1_reg_174),9));
    k_1_fu_341_p2 <= std_logic_vector(unsigned(k1_reg_174) + unsigned(ap_const_lv8_FF));
    k_fu_235_p2 <= (i_reg_151 xor ap_const_lv8_FF);

    output_V_ap_vld_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10, exitcond_fu_401_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond_fu_401_p2)))) then 
            output_V_ap_vld <= ap_const_logic_1;
        else 
            output_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    prod_fu_273_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(b_load_reg_447) * signed(a_load_reg_470))), 8));
    temp1_V_fu_422_p3 <= (tmp_2_reg_530 & c_q0);
    tmp_10_cast_fu_299_p1 <= std_logic_vector(resize(unsigned(prod_fu_273_p2),9));
    tmp_10_fu_323_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_317_p2),64));
    tmp_11_fu_328_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(c_q0));
    tmp_12_fu_335_p2 <= std_logic_vector(unsigned(reg_207) + unsigned(prod_reg_482));
    tmp_13_fu_347_p1 <= std_logic_vector(resize(unsigned(k_1_fu_341_p2),64));
    tmp_14_fu_359_p2 <= std_logic_vector(unsigned(tmp_21_cast_fu_356_p1) + unsigned(tmp_20_cast_fu_352_p1));
    tmp_15_fu_365_p3 <= tmp_14_fu_359_p2(8 downto 8);
    tmp_16_fu_377_p2 <= std_logic_vector(signed(ap_const_lv9_1FE) + signed(k1_cast_fu_373_p1));
        tmp_17_fu_383_p1 <= std_logic_vector(resize(signed(tmp_16_fu_377_p2),64));

    tmp_18_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(c_q1));
    tmp_19_fu_395_p2 <= std_logic_vector(unsigned(reg_207) + unsigned(carry_reg_487));
    tmp_1_fu_230_p1 <= std_logic_vector(resize(unsigned(tmp_fu_224_p2),64));
    tmp_20_cast_fu_352_p1 <= std_logic_vector(resize(unsigned(c_q1),9));
    tmp_21_cast_fu_356_p1 <= std_logic_vector(resize(unsigned(carry_reg_487),9));
    tmp_2_cast_fu_241_p0 <= b_q0;
    tmp_2_cast_fu_241_p1 <= std_logic_vector(resize(unsigned(tmp_2_cast_fu_241_p0),16));
    tmp_2_fu_412_p1 <= p_Repl2_1_reg_184(2040 - 1 downto 0);
    tmp_3_fu_407_p1 <= std_logic_vector(resize(unsigned(i1_reg_196),64));
    tmp_4_fu_317_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(k1_reg_174));
    tmp_5_fu_268_p1 <= std_logic_vector(resize(unsigned(k1_reg_174),64));
    tmp_6_fu_257_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(j_reg_163));
    tmp_7_fu_263_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_257_p2),64));
    tmp_8_cast_fu_295_p1 <= std_logic_vector(resize(unsigned(c_q0),9));
    tmp_8_fu_303_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_299_p1) + unsigned(tmp_8_cast_fu_295_p1));
    tmp_9_fu_309_p3 <= tmp_8_fu_303_p2(8 downto 8);
    tmp_fu_224_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(i_reg_151));
    tmp_s_fu_280_p0 <= tmp_2_cast_reg_452(8 - 1 downto 0);
    tmp_s_fu_280_p1 <= tmp_s_fu_280_p10(8 - 1 downto 0);
    tmp_s_fu_280_p10 <= std_logic_vector(resize(unsigned(a_load_reg_470),16));
    tmp_s_fu_280_p2 <= std_logic_vector(resize(unsigned(tmp_s_fu_280_p0) * unsigned(tmp_s_fu_280_p1), 16));
end behav;
