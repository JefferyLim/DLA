// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module bigint_math_PERIPH_BUS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 11,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    input  wire [7:0]                    number1_address0,
    input  wire                          number1_ce0,
    output wire [7:0]                    number1_q0,
    input  wire [7:0]                    number2_address0,
    input  wire                          number2_ce0,
    output wire [7:0]                    number2_q0,
    input  wire [2047:0]                 output_V,
    input  wire                          output_V_ap_vld
);
//------------------------Address Info-------------------
// 0x000 : Control signals
//         bit 0  - ap_start (Read/Write/COH)
//         bit 1  - ap_done (Read/COR)
//         bit 2  - ap_idle (Read)
//         bit 3  - ap_ready (Read)
//         bit 7  - auto_restart (Read/Write)
//         others - reserved
// 0x004 : Global Interrupt Enable Register
//         bit 0  - Global Interrupt Enable (Read/Write)
//         others - reserved
// 0x008 : IP Interrupt Enable Register (Read/Write)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x00c : IP Interrupt Status Register (Read/TOW)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x300 : Data signal of output_V
//         bit 31~0 - output_V[31:0] (Read)
// 0x304 : Data signal of output_V
//         bit 31~0 - output_V[63:32] (Read)
// 0x308 : Data signal of output_V
//         bit 31~0 - output_V[95:64] (Read)
// 0x30c : Data signal of output_V
//         bit 31~0 - output_V[127:96] (Read)
// 0x310 : Data signal of output_V
//         bit 31~0 - output_V[159:128] (Read)
// 0x314 : Data signal of output_V
//         bit 31~0 - output_V[191:160] (Read)
// 0x318 : Data signal of output_V
//         bit 31~0 - output_V[223:192] (Read)
// 0x31c : Data signal of output_V
//         bit 31~0 - output_V[255:224] (Read)
// 0x320 : Data signal of output_V
//         bit 31~0 - output_V[287:256] (Read)
// 0x324 : Data signal of output_V
//         bit 31~0 - output_V[319:288] (Read)
// 0x328 : Data signal of output_V
//         bit 31~0 - output_V[351:320] (Read)
// 0x32c : Data signal of output_V
//         bit 31~0 - output_V[383:352] (Read)
// 0x330 : Data signal of output_V
//         bit 31~0 - output_V[415:384] (Read)
// 0x334 : Data signal of output_V
//         bit 31~0 - output_V[447:416] (Read)
// 0x338 : Data signal of output_V
//         bit 31~0 - output_V[479:448] (Read)
// 0x33c : Data signal of output_V
//         bit 31~0 - output_V[511:480] (Read)
// 0x340 : Data signal of output_V
//         bit 31~0 - output_V[543:512] (Read)
// 0x344 : Data signal of output_V
//         bit 31~0 - output_V[575:544] (Read)
// 0x348 : Data signal of output_V
//         bit 31~0 - output_V[607:576] (Read)
// 0x34c : Data signal of output_V
//         bit 31~0 - output_V[639:608] (Read)
// 0x350 : Data signal of output_V
//         bit 31~0 - output_V[671:640] (Read)
// 0x354 : Data signal of output_V
//         bit 31~0 - output_V[703:672] (Read)
// 0x358 : Data signal of output_V
//         bit 31~0 - output_V[735:704] (Read)
// 0x35c : Data signal of output_V
//         bit 31~0 - output_V[767:736] (Read)
// 0x360 : Data signal of output_V
//         bit 31~0 - output_V[799:768] (Read)
// 0x364 : Data signal of output_V
//         bit 31~0 - output_V[831:800] (Read)
// 0x368 : Data signal of output_V
//         bit 31~0 - output_V[863:832] (Read)
// 0x36c : Data signal of output_V
//         bit 31~0 - output_V[895:864] (Read)
// 0x370 : Data signal of output_V
//         bit 31~0 - output_V[927:896] (Read)
// 0x374 : Data signal of output_V
//         bit 31~0 - output_V[959:928] (Read)
// 0x378 : Data signal of output_V
//         bit 31~0 - output_V[991:960] (Read)
// 0x37c : Data signal of output_V
//         bit 31~0 - output_V[1023:992] (Read)
// 0x380 : Data signal of output_V
//         bit 31~0 - output_V[1055:1024] (Read)
// 0x384 : Data signal of output_V
//         bit 31~0 - output_V[1087:1056] (Read)
// 0x388 : Data signal of output_V
//         bit 31~0 - output_V[1119:1088] (Read)
// 0x38c : Data signal of output_V
//         bit 31~0 - output_V[1151:1120] (Read)
// 0x390 : Data signal of output_V
//         bit 31~0 - output_V[1183:1152] (Read)
// 0x394 : Data signal of output_V
//         bit 31~0 - output_V[1215:1184] (Read)
// 0x398 : Data signal of output_V
//         bit 31~0 - output_V[1247:1216] (Read)
// 0x39c : Data signal of output_V
//         bit 31~0 - output_V[1279:1248] (Read)
// 0x3a0 : Data signal of output_V
//         bit 31~0 - output_V[1311:1280] (Read)
// 0x3a4 : Data signal of output_V
//         bit 31~0 - output_V[1343:1312] (Read)
// 0x3a8 : Data signal of output_V
//         bit 31~0 - output_V[1375:1344] (Read)
// 0x3ac : Data signal of output_V
//         bit 31~0 - output_V[1407:1376] (Read)
// 0x3b0 : Data signal of output_V
//         bit 31~0 - output_V[1439:1408] (Read)
// 0x3b4 : Data signal of output_V
//         bit 31~0 - output_V[1471:1440] (Read)
// 0x3b8 : Data signal of output_V
//         bit 31~0 - output_V[1503:1472] (Read)
// 0x3bc : Data signal of output_V
//         bit 31~0 - output_V[1535:1504] (Read)
// 0x3c0 : Data signal of output_V
//         bit 31~0 - output_V[1567:1536] (Read)
// 0x3c4 : Data signal of output_V
//         bit 31~0 - output_V[1599:1568] (Read)
// 0x3c8 : Data signal of output_V
//         bit 31~0 - output_V[1631:1600] (Read)
// 0x3cc : Data signal of output_V
//         bit 31~0 - output_V[1663:1632] (Read)
// 0x3d0 : Data signal of output_V
//         bit 31~0 - output_V[1695:1664] (Read)
// 0x3d4 : Data signal of output_V
//         bit 31~0 - output_V[1727:1696] (Read)
// 0x3d8 : Data signal of output_V
//         bit 31~0 - output_V[1759:1728] (Read)
// 0x3dc : Data signal of output_V
//         bit 31~0 - output_V[1791:1760] (Read)
// 0x3e0 : Data signal of output_V
//         bit 31~0 - output_V[1823:1792] (Read)
// 0x3e4 : Data signal of output_V
//         bit 31~0 - output_V[1855:1824] (Read)
// 0x3e8 : Data signal of output_V
//         bit 31~0 - output_V[1887:1856] (Read)
// 0x3ec : Data signal of output_V
//         bit 31~0 - output_V[1919:1888] (Read)
// 0x3f0 : Data signal of output_V
//         bit 31~0 - output_V[1951:1920] (Read)
// 0x3f4 : Data signal of output_V
//         bit 31~0 - output_V[1983:1952] (Read)
// 0x3f8 : Data signal of output_V
//         bit 31~0 - output_V[2015:1984] (Read)
// 0x3fc : Data signal of output_V
//         bit 31~0 - output_V[2047:2016] (Read)
// 0x400 : Control signal of output_V
//         bit 0  - output_V_ap_vld (Read/COR)
//         others - reserved
// 0x100 ~
// 0x1ff : Memory 'number1' (64 * 8b)
//         Word n : bit [ 7: 0] - number1[4n]
//                  bit [15: 8] - number1[4n+1]
//                  bit [23:16] - number1[4n+2]
//                  bit [31:24] - number1[4n+3]
// 0x200 ~
// 0x2ff : Memory 'number2' (64 * 8b)
//         Word n : bit [ 7: 0] - number2[4n]
//                  bit [15: 8] - number2[4n+1]
//                  bit [23:16] - number2[4n+2]
//                  bit [31:24] - number2[4n+3]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL          = 11'h000,
    ADDR_GIE              = 11'h004,
    ADDR_IER              = 11'h008,
    ADDR_ISR              = 11'h00c,
    ADDR_OUTPUT_V_DATA_0  = 11'h300,
    ADDR_OUTPUT_V_DATA_1  = 11'h304,
    ADDR_OUTPUT_V_DATA_2  = 11'h308,
    ADDR_OUTPUT_V_DATA_3  = 11'h30c,
    ADDR_OUTPUT_V_DATA_4  = 11'h310,
    ADDR_OUTPUT_V_DATA_5  = 11'h314,
    ADDR_OUTPUT_V_DATA_6  = 11'h318,
    ADDR_OUTPUT_V_DATA_7  = 11'h31c,
    ADDR_OUTPUT_V_DATA_8  = 11'h320,
    ADDR_OUTPUT_V_DATA_9  = 11'h324,
    ADDR_OUTPUT_V_DATA_10 = 11'h328,
    ADDR_OUTPUT_V_DATA_11 = 11'h32c,
    ADDR_OUTPUT_V_DATA_12 = 11'h330,
    ADDR_OUTPUT_V_DATA_13 = 11'h334,
    ADDR_OUTPUT_V_DATA_14 = 11'h338,
    ADDR_OUTPUT_V_DATA_15 = 11'h33c,
    ADDR_OUTPUT_V_DATA_16 = 11'h340,
    ADDR_OUTPUT_V_DATA_17 = 11'h344,
    ADDR_OUTPUT_V_DATA_18 = 11'h348,
    ADDR_OUTPUT_V_DATA_19 = 11'h34c,
    ADDR_OUTPUT_V_DATA_20 = 11'h350,
    ADDR_OUTPUT_V_DATA_21 = 11'h354,
    ADDR_OUTPUT_V_DATA_22 = 11'h358,
    ADDR_OUTPUT_V_DATA_23 = 11'h35c,
    ADDR_OUTPUT_V_DATA_24 = 11'h360,
    ADDR_OUTPUT_V_DATA_25 = 11'h364,
    ADDR_OUTPUT_V_DATA_26 = 11'h368,
    ADDR_OUTPUT_V_DATA_27 = 11'h36c,
    ADDR_OUTPUT_V_DATA_28 = 11'h370,
    ADDR_OUTPUT_V_DATA_29 = 11'h374,
    ADDR_OUTPUT_V_DATA_30 = 11'h378,
    ADDR_OUTPUT_V_DATA_31 = 11'h37c,
    ADDR_OUTPUT_V_DATA_32 = 11'h380,
    ADDR_OUTPUT_V_DATA_33 = 11'h384,
    ADDR_OUTPUT_V_DATA_34 = 11'h388,
    ADDR_OUTPUT_V_DATA_35 = 11'h38c,
    ADDR_OUTPUT_V_DATA_36 = 11'h390,
    ADDR_OUTPUT_V_DATA_37 = 11'h394,
    ADDR_OUTPUT_V_DATA_38 = 11'h398,
    ADDR_OUTPUT_V_DATA_39 = 11'h39c,
    ADDR_OUTPUT_V_DATA_40 = 11'h3a0,
    ADDR_OUTPUT_V_DATA_41 = 11'h3a4,
    ADDR_OUTPUT_V_DATA_42 = 11'h3a8,
    ADDR_OUTPUT_V_DATA_43 = 11'h3ac,
    ADDR_OUTPUT_V_DATA_44 = 11'h3b0,
    ADDR_OUTPUT_V_DATA_45 = 11'h3b4,
    ADDR_OUTPUT_V_DATA_46 = 11'h3b8,
    ADDR_OUTPUT_V_DATA_47 = 11'h3bc,
    ADDR_OUTPUT_V_DATA_48 = 11'h3c0,
    ADDR_OUTPUT_V_DATA_49 = 11'h3c4,
    ADDR_OUTPUT_V_DATA_50 = 11'h3c8,
    ADDR_OUTPUT_V_DATA_51 = 11'h3cc,
    ADDR_OUTPUT_V_DATA_52 = 11'h3d0,
    ADDR_OUTPUT_V_DATA_53 = 11'h3d4,
    ADDR_OUTPUT_V_DATA_54 = 11'h3d8,
    ADDR_OUTPUT_V_DATA_55 = 11'h3dc,
    ADDR_OUTPUT_V_DATA_56 = 11'h3e0,
    ADDR_OUTPUT_V_DATA_57 = 11'h3e4,
    ADDR_OUTPUT_V_DATA_58 = 11'h3e8,
    ADDR_OUTPUT_V_DATA_59 = 11'h3ec,
    ADDR_OUTPUT_V_DATA_60 = 11'h3f0,
    ADDR_OUTPUT_V_DATA_61 = 11'h3f4,
    ADDR_OUTPUT_V_DATA_62 = 11'h3f8,
    ADDR_OUTPUT_V_DATA_63 = 11'h3fc,
    ADDR_OUTPUT_V_CTRL    = 11'h400,
    ADDR_NUMBER1_BASE     = 11'h100,
    ADDR_NUMBER1_HIGH     = 11'h1ff,
    ADDR_NUMBER2_BASE     = 11'h200,
    ADDR_NUMBER2_HIGH     = 11'h2ff,
    WRIDLE                = 2'd0,
    WRDATA                = 2'd1,
    WRRESP                = 2'd2,
    RDIDLE                = 2'd0,
    RDDATA                = 2'd1,
    ADDR_BITS         = 11;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    wire                          int_ap_idle;
    wire                          int_ap_ready;
    reg                           int_ap_done;
    reg                           int_ap_start;
    reg                           int_auto_restart;
    reg                           int_gie;
    reg  [1:0]                    int_ier;
    reg  [1:0]                    int_isr;
    reg  [2047:0]                 int_output_V;
    reg                           int_output_V_ap_vld;
    // memory signals
    wire [5:0]                    int_number1_address0;
    wire                          int_number1_ce0;
    wire                          int_number1_we0;
    wire [3:0]                    int_number1_be0;
    wire [31:0]                   int_number1_d0;
    wire [31:0]                   int_number1_q0;
    wire [5:0]                    int_number1_address1;
    wire                          int_number1_ce1;
    wire                          int_number1_we1;
    wire [3:0]                    int_number1_be1;
    wire [31:0]                   int_number1_d1;
    wire [31:0]                   int_number1_q1;
    reg                           int_number1_read;
    reg                           int_number1_write;
    reg  [1:0]                    int_number1_shift;
    wire [5:0]                    int_number2_address0;
    wire                          int_number2_ce0;
    wire                          int_number2_we0;
    wire [3:0]                    int_number2_be0;
    wire [31:0]                   int_number2_d0;
    wire [31:0]                   int_number2_q0;
    wire [5:0]                    int_number2_address1;
    wire                          int_number2_ce1;
    wire                          int_number2_we1;
    wire [3:0]                    int_number2_be1;
    wire [31:0]                   int_number2_d1;
    wire [31:0]                   int_number2_q1;
    reg                           int_number2_read;
    reg                           int_number2_write;
    reg  [1:0]                    int_number2_shift;

//------------------------Instantiation------------------
// int_number1
bigint_math_PERIPH_BUS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 64 )
) int_number1 (
    .clk0     ( ACLK ),
    .address0 ( int_number1_address0 ),
    .ce0      ( int_number1_ce0 ),
    .we0      ( int_number1_we0 ),
    .be0      ( int_number1_be0 ),
    .d0       ( int_number1_d0 ),
    .q0       ( int_number1_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_number1_address1 ),
    .ce1      ( int_number1_ce1 ),
    .we1      ( int_number1_we1 ),
    .be1      ( int_number1_be1 ),
    .d1       ( int_number1_d1 ),
    .q1       ( int_number1_q1 )
);
// int_number2
bigint_math_PERIPH_BUS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 64 )
) int_number2 (
    .clk0     ( ACLK ),
    .address0 ( int_number2_address0 ),
    .ce0      ( int_number2_ce0 ),
    .we0      ( int_number2_we0 ),
    .be0      ( int_number2_be0 ),
    .d0       ( int_number2_d0 ),
    .q0       ( int_number2_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_number2_address1 ),
    .ce1      ( int_number2_ce1 ),
    .we1      ( int_number2_we1 ),
    .be1      ( int_number2_be1 ),
    .d1       ( int_number2_d1 ),
    .q1       ( int_number2_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRIDLE;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_number1_read & !int_number2_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDIDLE;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_OUTPUT_V_DATA_0: begin
                    rdata <= int_output_V[31:0];
                end
                ADDR_OUTPUT_V_DATA_1: begin
                    rdata <= int_output_V[63:32];
                end
                ADDR_OUTPUT_V_DATA_2: begin
                    rdata <= int_output_V[95:64];
                end
                ADDR_OUTPUT_V_DATA_3: begin
                    rdata <= int_output_V[127:96];
                end
                ADDR_OUTPUT_V_DATA_4: begin
                    rdata <= int_output_V[159:128];
                end
                ADDR_OUTPUT_V_DATA_5: begin
                    rdata <= int_output_V[191:160];
                end
                ADDR_OUTPUT_V_DATA_6: begin
                    rdata <= int_output_V[223:192];
                end
                ADDR_OUTPUT_V_DATA_7: begin
                    rdata <= int_output_V[255:224];
                end
                ADDR_OUTPUT_V_DATA_8: begin
                    rdata <= int_output_V[287:256];
                end
                ADDR_OUTPUT_V_DATA_9: begin
                    rdata <= int_output_V[319:288];
                end
                ADDR_OUTPUT_V_DATA_10: begin
                    rdata <= int_output_V[351:320];
                end
                ADDR_OUTPUT_V_DATA_11: begin
                    rdata <= int_output_V[383:352];
                end
                ADDR_OUTPUT_V_DATA_12: begin
                    rdata <= int_output_V[415:384];
                end
                ADDR_OUTPUT_V_DATA_13: begin
                    rdata <= int_output_V[447:416];
                end
                ADDR_OUTPUT_V_DATA_14: begin
                    rdata <= int_output_V[479:448];
                end
                ADDR_OUTPUT_V_DATA_15: begin
                    rdata <= int_output_V[511:480];
                end
                ADDR_OUTPUT_V_DATA_16: begin
                    rdata <= int_output_V[543:512];
                end
                ADDR_OUTPUT_V_DATA_17: begin
                    rdata <= int_output_V[575:544];
                end
                ADDR_OUTPUT_V_DATA_18: begin
                    rdata <= int_output_V[607:576];
                end
                ADDR_OUTPUT_V_DATA_19: begin
                    rdata <= int_output_V[639:608];
                end
                ADDR_OUTPUT_V_DATA_20: begin
                    rdata <= int_output_V[671:640];
                end
                ADDR_OUTPUT_V_DATA_21: begin
                    rdata <= int_output_V[703:672];
                end
                ADDR_OUTPUT_V_DATA_22: begin
                    rdata <= int_output_V[735:704];
                end
                ADDR_OUTPUT_V_DATA_23: begin
                    rdata <= int_output_V[767:736];
                end
                ADDR_OUTPUT_V_DATA_24: begin
                    rdata <= int_output_V[799:768];
                end
                ADDR_OUTPUT_V_DATA_25: begin
                    rdata <= int_output_V[831:800];
                end
                ADDR_OUTPUT_V_DATA_26: begin
                    rdata <= int_output_V[863:832];
                end
                ADDR_OUTPUT_V_DATA_27: begin
                    rdata <= int_output_V[895:864];
                end
                ADDR_OUTPUT_V_DATA_28: begin
                    rdata <= int_output_V[927:896];
                end
                ADDR_OUTPUT_V_DATA_29: begin
                    rdata <= int_output_V[959:928];
                end
                ADDR_OUTPUT_V_DATA_30: begin
                    rdata <= int_output_V[991:960];
                end
                ADDR_OUTPUT_V_DATA_31: begin
                    rdata <= int_output_V[1023:992];
                end
                ADDR_OUTPUT_V_DATA_32: begin
                    rdata <= int_output_V[1055:1024];
                end
                ADDR_OUTPUT_V_DATA_33: begin
                    rdata <= int_output_V[1087:1056];
                end
                ADDR_OUTPUT_V_DATA_34: begin
                    rdata <= int_output_V[1119:1088];
                end
                ADDR_OUTPUT_V_DATA_35: begin
                    rdata <= int_output_V[1151:1120];
                end
                ADDR_OUTPUT_V_DATA_36: begin
                    rdata <= int_output_V[1183:1152];
                end
                ADDR_OUTPUT_V_DATA_37: begin
                    rdata <= int_output_V[1215:1184];
                end
                ADDR_OUTPUT_V_DATA_38: begin
                    rdata <= int_output_V[1247:1216];
                end
                ADDR_OUTPUT_V_DATA_39: begin
                    rdata <= int_output_V[1279:1248];
                end
                ADDR_OUTPUT_V_DATA_40: begin
                    rdata <= int_output_V[1311:1280];
                end
                ADDR_OUTPUT_V_DATA_41: begin
                    rdata <= int_output_V[1343:1312];
                end
                ADDR_OUTPUT_V_DATA_42: begin
                    rdata <= int_output_V[1375:1344];
                end
                ADDR_OUTPUT_V_DATA_43: begin
                    rdata <= int_output_V[1407:1376];
                end
                ADDR_OUTPUT_V_DATA_44: begin
                    rdata <= int_output_V[1439:1408];
                end
                ADDR_OUTPUT_V_DATA_45: begin
                    rdata <= int_output_V[1471:1440];
                end
                ADDR_OUTPUT_V_DATA_46: begin
                    rdata <= int_output_V[1503:1472];
                end
                ADDR_OUTPUT_V_DATA_47: begin
                    rdata <= int_output_V[1535:1504];
                end
                ADDR_OUTPUT_V_DATA_48: begin
                    rdata <= int_output_V[1567:1536];
                end
                ADDR_OUTPUT_V_DATA_49: begin
                    rdata <= int_output_V[1599:1568];
                end
                ADDR_OUTPUT_V_DATA_50: begin
                    rdata <= int_output_V[1631:1600];
                end
                ADDR_OUTPUT_V_DATA_51: begin
                    rdata <= int_output_V[1663:1632];
                end
                ADDR_OUTPUT_V_DATA_52: begin
                    rdata <= int_output_V[1695:1664];
                end
                ADDR_OUTPUT_V_DATA_53: begin
                    rdata <= int_output_V[1727:1696];
                end
                ADDR_OUTPUT_V_DATA_54: begin
                    rdata <= int_output_V[1759:1728];
                end
                ADDR_OUTPUT_V_DATA_55: begin
                    rdata <= int_output_V[1791:1760];
                end
                ADDR_OUTPUT_V_DATA_56: begin
                    rdata <= int_output_V[1823:1792];
                end
                ADDR_OUTPUT_V_DATA_57: begin
                    rdata <= int_output_V[1855:1824];
                end
                ADDR_OUTPUT_V_DATA_58: begin
                    rdata <= int_output_V[1887:1856];
                end
                ADDR_OUTPUT_V_DATA_59: begin
                    rdata <= int_output_V[1919:1888];
                end
                ADDR_OUTPUT_V_DATA_60: begin
                    rdata <= int_output_V[1951:1920];
                end
                ADDR_OUTPUT_V_DATA_61: begin
                    rdata <= int_output_V[1983:1952];
                end
                ADDR_OUTPUT_V_DATA_62: begin
                    rdata <= int_output_V[2015:1984];
                end
                ADDR_OUTPUT_V_DATA_63: begin
                    rdata <= int_output_V[2047:2016];
                end
                ADDR_OUTPUT_V_CTRL: begin
                    rdata[0] <= int_output_V_ap_vld;
                end
            endcase
        end
        else if (int_number1_read) begin
            rdata <= int_number1_q1;
        end
        else if (int_number2_read) begin
            rdata <= int_number2_q1;
        end
    end
end


//------------------------Register logic-----------------
assign interrupt    = int_gie & (|int_isr);
assign ap_start     = int_ap_start;
assign int_ap_idle  = ap_idle;
assign int_ap_ready = ap_ready;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (int_ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_output_V
always @(posedge ACLK) begin
    if (ARESET)
        int_output_V <= 0;
    else if (ACLK_EN) begin
        if (output_V_ap_vld)
            int_output_V <= output_V;
    end
end

// int_output_V_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_output_V_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (output_V_ap_vld)
            int_output_V_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_OUTPUT_V_CTRL)
            int_output_V_ap_vld <= 1'b0; // clear on read
    end
end


//------------------------Memory logic-------------------
// number1
assign int_number1_address0 = number1_address0 >> 2;
assign int_number1_ce0      = number1_ce0;
assign int_number1_we0      = 1'b0;
assign int_number1_be0      = 1'b0;
assign int_number1_d0       = 1'b0;
assign number1_q0           = int_number1_q0 >> (int_number1_shift * 8);
assign int_number1_address1 = ar_hs? raddr[7:2] : waddr[7:2];
assign int_number1_ce1      = ar_hs | (int_number1_write & WVALID);
assign int_number1_we1      = int_number1_write & WVALID;
assign int_number1_be1      = WSTRB;
assign int_number1_d1       = WDATA;
// number2
assign int_number2_address0 = number2_address0 >> 2;
assign int_number2_ce0      = number2_ce0;
assign int_number2_we0      = 1'b0;
assign int_number2_be0      = 1'b0;
assign int_number2_d0       = 1'b0;
assign number2_q0           = int_number2_q0 >> (int_number2_shift * 8);
assign int_number2_address1 = ar_hs? raddr[7:2] : waddr[7:2];
assign int_number2_ce1      = ar_hs | (int_number2_write & WVALID);
assign int_number2_we1      = int_number2_write & WVALID;
assign int_number2_be1      = WSTRB;
assign int_number2_d1       = WDATA;
// int_number1_read
always @(posedge ACLK) begin
    if (ARESET)
        int_number1_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_NUMBER1_BASE && raddr <= ADDR_NUMBER1_HIGH)
            int_number1_read <= 1'b1;
        else
            int_number1_read <= 1'b0;
    end
end

// int_number1_write
always @(posedge ACLK) begin
    if (ARESET)
        int_number1_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_NUMBER1_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_NUMBER1_HIGH)
            int_number1_write <= 1'b1;
        else if (WVALID)
            int_number1_write <= 1'b0;
    end
end

// int_number1_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (number1_ce0)
            int_number1_shift <= number1_address0[1:0];
    end
end

// int_number2_read
always @(posedge ACLK) begin
    if (ARESET)
        int_number2_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_NUMBER2_BASE && raddr <= ADDR_NUMBER2_HIGH)
            int_number2_read <= 1'b1;
        else
            int_number2_read <= 1'b0;
    end
end

// int_number2_write
always @(posedge ACLK) begin
    if (ARESET)
        int_number2_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_NUMBER2_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_NUMBER2_HIGH)
            int_number2_write <= 1'b1;
        else if (WVALID)
            int_number2_write <= 1'b0;
    end
end

// int_number2_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (number2_ce0)
            int_number2_shift <= number2_address0[1:0];
    end
end


endmodule


`timescale 1ns/1ps

module bigint_math_PERIPH_BUS_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

