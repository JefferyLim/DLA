// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _bigint_math_bigint_copy_HH_
#define _bigint_math_bigint_copy_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct bigint_math_bigint_copy : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > to_r_address0;
    sc_out< sc_logic > to_r_ce0;
    sc_out< sc_logic > to_r_we0;
    sc_out< sc_lv<8> > to_r_d0;
    sc_out< sc_lv<8> > from_address0;
    sc_out< sc_logic > from_ce0;
    sc_in< sc_lv<8> > from_q0;


    // Module declarations
    bigint_math_bigint_copy(sc_module_name name);
    SC_HAS_PROCESS(bigint_math_bigint_copy);

    ~bigint_math_bigint_copy();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_20;
    sc_signal< sc_lv<9> > i_9_fu_68_p2;
    sc_signal< sc_lv<9> > i_9_reg_82;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_43;
    sc_signal< sc_lv<64> > tmp_fu_74_p1;
    sc_signal< sc_lv<64> > tmp_reg_87;
    sc_signal< sc_lv<1> > exitcond_fu_62_p2;
    sc_signal< sc_lv<9> > i_reg_51;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_64;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_st2_fsm_1;
    static const sc_lv<3> ap_ST_st3_fsm_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_20();
    void thread_ap_sig_43();
    void thread_ap_sig_64();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_exitcond_fu_62_p2();
    void thread_from_address0();
    void thread_from_ce0();
    void thread_i_9_fu_68_p2();
    void thread_tmp_fu_74_p1();
    void thread_to_r_address0();
    void thread_to_r_ce0();
    void thread_to_r_d0();
    void thread_to_r_we0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
