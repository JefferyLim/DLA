-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.NUMERIC_STD.all;

entity bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0 is
port (
    clk: in std_logic;
    reset: in std_logic;
    ce: in std_logic;
    a: in std_logic_vector(2047 downto 0);
    b: in std_logic_vector(2047 downto 0);
    s: out std_logic_vector(2047 downto 0));
end entity;

architecture behav of bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0 is
  component bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder is 
    port (
      faa : IN STD_LOGIC_VECTOR (228-1 downto 0);
      fab : IN STD_LOGIC_VECTOR (228-1 downto 0);
      facin : IN STD_LOGIC_VECTOR (0 downto 0);
      fas : OUT STD_LOGIC_VECTOR (228-1 downto 0);
      facout : OUT STD_LOGIC_VECTOR (0 downto 0));
  end component;
  component bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder_f is 
    port (
      faa : IN STD_LOGIC_VECTOR (224-1 downto 0);
      fab : IN STD_LOGIC_VECTOR (224-1 downto 0);
      facin : IN STD_LOGIC_VECTOR (0 downto 0);
      fas : OUT STD_LOGIC_VECTOR (224-1 downto 0);
      facout : OUT STD_LOGIC_VECTOR (0 downto 0));
  end component;


-- ---- register and wire type variables list here ----

-- wire for the primary inputs
  signal a_reg : std_logic_vector(2047 downto 0);
  signal b_reg : std_logic_vector(2047 downto 0);

-- wires for each small adder
  signal a0_cb : std_logic_vector(227 downto 0);
  signal b0_cb : std_logic_vector(227 downto 0);
  signal a1_cb : std_logic_vector(455 downto 228);
  signal b1_cb : std_logic_vector(455 downto 228);
  signal a2_cb : std_logic_vector(683 downto 456);
  signal b2_cb : std_logic_vector(683 downto 456);
  signal a3_cb : std_logic_vector(911 downto 684);
  signal b3_cb : std_logic_vector(911 downto 684);
  signal a4_cb : std_logic_vector(1139 downto 912);
  signal b4_cb : std_logic_vector(1139 downto 912);
  signal a5_cb : std_logic_vector(1367 downto 1140);
  signal b5_cb : std_logic_vector(1367 downto 1140);
  signal a6_cb : std_logic_vector(1595 downto 1368);
  signal b6_cb : std_logic_vector(1595 downto 1368);
  signal a7_cb : std_logic_vector(1823 downto 1596);
  signal b7_cb : std_logic_vector(1823 downto 1596);
  signal a8_cb : std_logic_vector(2047 downto 1824);
  signal b8_cb : std_logic_vector(2047 downto 1824);

-- registers for input register array
  type ramtypei0 is array (0 downto 0) of std_logic_vector(227 downto 0);
  signal a1_cb_regi1 : ramtypei0; 
  signal b1_cb_regi1 : ramtypei0; 
  type ramtypei1 is array (1 downto 0) of std_logic_vector(227 downto 0);
  signal a2_cb_regi2 : ramtypei1; 
  signal b2_cb_regi2 : ramtypei1; 
  type ramtypei2 is array (2 downto 0) of std_logic_vector(227 downto 0);
  signal a3_cb_regi3 : ramtypei2; 
  signal b3_cb_regi3 : ramtypei2; 
  type ramtypei3 is array (3 downto 0) of std_logic_vector(227 downto 0);
  signal a4_cb_regi4 : ramtypei3; 
  signal b4_cb_regi4 : ramtypei3; 
  type ramtypei4 is array (4 downto 0) of std_logic_vector(227 downto 0);
  signal a5_cb_regi5 : ramtypei4; 
  signal b5_cb_regi5 : ramtypei4; 
  type ramtypei5 is array (5 downto 0) of std_logic_vector(227 downto 0);
  signal a6_cb_regi6 : ramtypei5; 
  signal b6_cb_regi6 : ramtypei5; 
  type ramtypei6 is array (6 downto 0) of std_logic_vector(227 downto 0);
  signal a7_cb_regi7 : ramtypei6; 
  signal b7_cb_regi7 : ramtypei6; 
  type ramtypei7 is array (7 downto 0) of std_logic_vector(223 downto 0);
  signal a8_cb_regi8 : ramtypei7;
  signal b8_cb_regi8 : ramtypei7;

-- wires for each full adder sum
  signal fas : std_logic_vector(2047 downto 0);

-- wires and register for carry out bit
  signal faccout_ini : std_logic_vector (0 downto 0);
  signal faccout0_co0 : std_logic_vector (0 downto 0); 
  signal faccout1_co1 : std_logic_vector (0 downto 0); 
  signal faccout2_co2 : std_logic_vector (0 downto 0); 
  signal faccout3_co3 : std_logic_vector (0 downto 0); 
  signal faccout4_co4 : std_logic_vector (0 downto 0); 
  signal faccout5_co5 : std_logic_vector (0 downto 0); 
  signal faccout6_co6 : std_logic_vector (0 downto 0); 
  signal faccout7_co7 : std_logic_vector (0 downto 0); 
  signal faccout8_co8 : std_logic_vector (0 downto 0);

  signal faccout0_co0_reg : std_logic_vector (0 downto 0);
  signal faccout1_co1_reg : std_logic_vector (0 downto 0);
  signal faccout2_co2_reg : std_logic_vector (0 downto 0);
  signal faccout3_co3_reg : std_logic_vector (0 downto 0);
  signal faccout4_co4_reg : std_logic_vector (0 downto 0);
  signal faccout5_co5_reg : std_logic_vector (0 downto 0);
  signal faccout6_co6_reg : std_logic_vector (0 downto 0);
  signal faccout7_co7_reg : std_logic_vector (0 downto 0);

-- registers for output register array
  type ramtypeo7 is array (7 downto 0) of std_logic_vector(227 downto 0);
  signal s0_ca_rego0 : ramtypeo7; 
  type ramtypeo6 is array (6 downto 0) of std_logic_vector(227 downto 0);
  signal s1_ca_rego1 : ramtypeo6; 
  type ramtypeo5 is array (5 downto 0) of std_logic_vector(227 downto 0);
  signal s2_ca_rego2 : ramtypeo5; 
  type ramtypeo4 is array (4 downto 0) of std_logic_vector(227 downto 0);
  signal s3_ca_rego3 : ramtypeo4; 
  type ramtypeo3 is array (3 downto 0) of std_logic_vector(227 downto 0);
  signal s4_ca_rego4 : ramtypeo3; 
  type ramtypeo2 is array (2 downto 0) of std_logic_vector(227 downto 0);
  signal s5_ca_rego5 : ramtypeo2; 
  type ramtypeo1 is array (1 downto 0) of std_logic_vector(227 downto 0);
  signal s6_ca_rego6 : ramtypeo1; 
  type ramtypeo0 is array (0 downto 0) of std_logic_vector(227 downto 0);
  signal s7_ca_rego7 : ramtypeo0; 

-- wire for the temporary output
  signal s_tmp : std_logic_vector(2047 downto 0);

-- ---- RTL code for assignment statements/always blocks/module instantiations here ----
  begin
  a_reg <= std_logic_vector(resize(unsigned(a), 2048));
  b_reg <= std_logic_vector(resize(unsigned(b), 2048));

-- small adder input assigments
  a0_cb <= a_reg(227 downto 0);
  b0_cb <= b_reg(227 downto 0);
  a1_cb <= a_reg(455 downto 228);
  b1_cb <= b_reg(455 downto 228);
  a2_cb <= a_reg(683 downto 456);
  b2_cb <= b_reg(683 downto 456);
  a3_cb <= a_reg(911 downto 684);
  b3_cb <= b_reg(911 downto 684);
  a4_cb <= a_reg(1139 downto 912);
  b4_cb <= b_reg(1139 downto 912);
  a5_cb <= a_reg(1367 downto 1140);
  b5_cb <= b_reg(1367 downto 1140);
  a6_cb <= a_reg(1595 downto 1368);
  b6_cb <= b_reg(1595 downto 1368);
  a7_cb <= a_reg(1823 downto 1596);
  b7_cb <= b_reg(1823 downto 1596);
  a8_cb <= a_reg(2047 downto 1824);
  b8_cb <= b_reg(2047 downto 1824);

-- input register array
  process (clk)
    begin
      if (clk'event and clk='1') then
        if (ce='1') then
        a1_cb_regi1 (0) <= a1_cb;
        b1_cb_regi1 (0) <= b1_cb;
        a2_cb_regi2 (0) <= a2_cb;
        b2_cb_regi2 (0) <= b2_cb;
        a3_cb_regi3 (0) <= a3_cb;
        b3_cb_regi3 (0) <= b3_cb;
        a4_cb_regi4 (0) <= a4_cb;
        b4_cb_regi4 (0) <= b4_cb;
        a5_cb_regi5 (0) <= a5_cb;
        b5_cb_regi5 (0) <= b5_cb;
        a6_cb_regi6 (0) <= a6_cb;
        b6_cb_regi6 (0) <= b6_cb;
        a7_cb_regi7 (0) <= a7_cb;
        b7_cb_regi7 (0) <= b7_cb;
        a8_cb_regi8 (0) <= a8_cb;
        b8_cb_regi8 (0) <= b8_cb;
        a2_cb_regi2 (1) <= a2_cb_regi2 (0);
        b2_cb_regi2 (1) <= b2_cb_regi2 (0);
        a3_cb_regi3 (1) <= a3_cb_regi3 (0);
        b3_cb_regi3 (1) <= b3_cb_regi3 (0);
        a4_cb_regi4 (1) <= a4_cb_regi4 (0);
        b4_cb_regi4 (1) <= b4_cb_regi4 (0);
        a5_cb_regi5 (1) <= a5_cb_regi5 (0);
        b5_cb_regi5 (1) <= b5_cb_regi5 (0);
        a6_cb_regi6 (1) <= a6_cb_regi6 (0);
        b6_cb_regi6 (1) <= b6_cb_regi6 (0);
        a7_cb_regi7 (1) <= a7_cb_regi7 (0);
        b7_cb_regi7 (1) <= b7_cb_regi7 (0);
        a8_cb_regi8 (1) <= a8_cb_regi8 (0);
        b8_cb_regi8 (1) <= b8_cb_regi8 (0);
        a3_cb_regi3 (2) <= a3_cb_regi3 (1);
        b3_cb_regi3 (2) <= b3_cb_regi3 (1);
        a4_cb_regi4 (2) <= a4_cb_regi4 (1);
        b4_cb_regi4 (2) <= b4_cb_regi4 (1);
        a5_cb_regi5 (2) <= a5_cb_regi5 (1);
        b5_cb_regi5 (2) <= b5_cb_regi5 (1);
        a6_cb_regi6 (2) <= a6_cb_regi6 (1);
        b6_cb_regi6 (2) <= b6_cb_regi6 (1);
        a7_cb_regi7 (2) <= a7_cb_regi7 (1);
        b7_cb_regi7 (2) <= b7_cb_regi7 (1);
        a8_cb_regi8 (2) <= a8_cb_regi8 (1);
        b8_cb_regi8 (2) <= b8_cb_regi8 (1);
        a4_cb_regi4 (3) <= a4_cb_regi4 (2);
        b4_cb_regi4 (3) <= b4_cb_regi4 (2);
        a5_cb_regi5 (3) <= a5_cb_regi5 (2);
        b5_cb_regi5 (3) <= b5_cb_regi5 (2);
        a6_cb_regi6 (3) <= a6_cb_regi6 (2);
        b6_cb_regi6 (3) <= b6_cb_regi6 (2);
        a7_cb_regi7 (3) <= a7_cb_regi7 (2);
        b7_cb_regi7 (3) <= b7_cb_regi7 (2);
        a8_cb_regi8 (3) <= a8_cb_regi8 (2);
        b8_cb_regi8 (3) <= b8_cb_regi8 (2);
        a5_cb_regi5 (4) <= a5_cb_regi5 (3);
        b5_cb_regi5 (4) <= b5_cb_regi5 (3);
        a6_cb_regi6 (4) <= a6_cb_regi6 (3);
        b6_cb_regi6 (4) <= b6_cb_regi6 (3);
        a7_cb_regi7 (4) <= a7_cb_regi7 (3);
        b7_cb_regi7 (4) <= b7_cb_regi7 (3);
        a8_cb_regi8 (4) <= a8_cb_regi8 (3);
        b8_cb_regi8 (4) <= b8_cb_regi8 (3);
        a6_cb_regi6 (5) <= a6_cb_regi6 (4);
        b6_cb_regi6 (5) <= b6_cb_regi6 (4);
        a7_cb_regi7 (5) <= a7_cb_regi7 (4);
        b7_cb_regi7 (5) <= b7_cb_regi7 (4);
        a8_cb_regi8 (5) <= a8_cb_regi8 (4);
        b8_cb_regi8 (5) <= b8_cb_regi8 (4);
        a7_cb_regi7 (6) <= a7_cb_regi7 (5);
        b7_cb_regi7 (6) <= b7_cb_regi7 (5);
        a8_cb_regi8 (6) <= a8_cb_regi8 (5);
        b8_cb_regi8 (6) <= b8_cb_regi8 (5);
        a8_cb_regi8 (7) <= a8_cb_regi8 (6);
        b8_cb_regi8 (7) <= b8_cb_regi8 (6);
      end if;
    end if;
  end process;

-- carry out bit processing
  process (clk)
    begin
      if (clk'event and clk='1') then
        if (ce='1') then
      faccout0_co0_reg <= faccout0_co0;
      faccout1_co1_reg <= faccout1_co1;
      faccout2_co2_reg <= faccout2_co2;
      faccout3_co3_reg <= faccout3_co3;
      faccout4_co4_reg <= faccout4_co4;
      faccout5_co5_reg <= faccout5_co5;
      faccout6_co6_reg <= faccout6_co6;
      faccout7_co7_reg <= faccout7_co7;
      end if;
    end if;
  end process;


-- small adder generation 
  u0 : bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder
      port map
          (faa    => a0_cb,
          fab    => b0_cb,
          facin  => faccout_ini,
          fas    => fas(227 downto 0),
          facout => faccout0_co0);
  u1 : bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder
      port map
          (faa    => a1_cb_regi1(0),
          fab    => b1_cb_regi1(0),
          facin  => faccout0_co0_reg,
          fas    => fas(455 downto 228),
          facout => faccout1_co1);
  u2 : bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder
      port map
          (faa    => a2_cb_regi2(1),
          fab    => b2_cb_regi2(1),
          facin  => faccout1_co1_reg,
          fas    => fas(683 downto 456),
          facout => faccout2_co2);
  u3 : bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder
      port map
          (faa    => a3_cb_regi3(2),
          fab    => b3_cb_regi3(2),
          facin  => faccout2_co2_reg,
          fas    => fas(911 downto 684),
          facout => faccout3_co3);
  u4 : bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder
      port map
          (faa    => a4_cb_regi4(3),
          fab    => b4_cb_regi4(3),
          facin  => faccout3_co3_reg,
          fas    => fas(1139 downto 912),
          facout => faccout4_co4);
  u5 : bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder
      port map
          (faa    => a5_cb_regi5(4),
          fab    => b5_cb_regi5(4),
          facin  => faccout4_co4_reg,
          fas    => fas(1367 downto 1140),
          facout => faccout5_co5);
  u6 : bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder
      port map
          (faa    => a6_cb_regi6(5),
          fab    => b6_cb_regi6(5),
          facin  => faccout5_co5_reg,
          fas    => fas(1595 downto 1368),
          facout => faccout6_co6);
  u7 : bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder
      port map
          (faa    => a7_cb_regi7(6),
          fab    => b7_cb_regi7(6),
          facin  => faccout6_co6_reg,
          fas    => fas(1823 downto 1596),
          facout => faccout7_co7);
    u8 : bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder_f
        port map
            (faa    => a8_cb_regi8(7),
            fab    => b8_cb_regi8(7),
            facin  => faccout7_co7_reg,
            fas    => fas(2047 downto 1824),
            facout => faccout8_co8);

  faccout_ini <= "0";

-- output register array
  process (clk)
    begin
      if (clk'event and clk='1') then
        if (ce='1') then
        s0_ca_rego0 (0) <= fas(227 downto 0);
        s1_ca_rego1 (0) <= fas(455 downto 228);
        s2_ca_rego2 (0) <= fas(683 downto 456);
        s3_ca_rego3 (0) <= fas(911 downto 684);
        s4_ca_rego4 (0) <= fas(1139 downto 912);
        s5_ca_rego5 (0) <= fas(1367 downto 1140);
        s6_ca_rego6 (0) <= fas(1595 downto 1368);
        s7_ca_rego7 (0) <= fas(1823 downto 1596);
        s0_ca_rego0 (1) <= s0_ca_rego0 (0);
        s0_ca_rego0 (2) <= s0_ca_rego0 (1);
        s0_ca_rego0 (3) <= s0_ca_rego0 (2);
        s0_ca_rego0 (4) <= s0_ca_rego0 (3);
        s0_ca_rego0 (5) <= s0_ca_rego0 (4);
        s0_ca_rego0 (6) <= s0_ca_rego0 (5);
        s0_ca_rego0 (7) <= s0_ca_rego0 (6);
        s1_ca_rego1 (1) <= s1_ca_rego1 (0);
        s1_ca_rego1 (2) <= s1_ca_rego1 (1);
        s1_ca_rego1 (3) <= s1_ca_rego1 (2);
        s1_ca_rego1 (4) <= s1_ca_rego1 (3);
        s1_ca_rego1 (5) <= s1_ca_rego1 (4);
        s1_ca_rego1 (6) <= s1_ca_rego1 (5);
        s2_ca_rego2 (1) <= s2_ca_rego2 (0);
        s2_ca_rego2 (2) <= s2_ca_rego2 (1);
        s2_ca_rego2 (3) <= s2_ca_rego2 (2);
        s2_ca_rego2 (4) <= s2_ca_rego2 (3);
        s2_ca_rego2 (5) <= s2_ca_rego2 (4);
        s3_ca_rego3 (1) <= s3_ca_rego3 (0);
        s3_ca_rego3 (2) <= s3_ca_rego3 (1);
        s3_ca_rego3 (3) <= s3_ca_rego3 (2);
        s3_ca_rego3 (4) <= s3_ca_rego3 (3);
        s4_ca_rego4 (1) <= s4_ca_rego4 (0);
        s4_ca_rego4 (2) <= s4_ca_rego4 (1);
        s4_ca_rego4 (3) <= s4_ca_rego4 (2);
        s5_ca_rego5 (1) <= s5_ca_rego5 (0);
        s5_ca_rego5 (2) <= s5_ca_rego5 (1);
        s6_ca_rego6 (1) <= s6_ca_rego6 (0);
      end if;
    end if;
  end process;

-- get the s_tmp, assign it to the primary output
  s_tmp(227 downto 0) <= s0_ca_rego0(7);
  s_tmp(455 downto 228) <= s1_ca_rego1(6);
  s_tmp(683 downto 456) <= s2_ca_rego2(5);
  s_tmp(911 downto 684) <= s3_ca_rego3(4);
  s_tmp(1139 downto 912) <= s4_ca_rego4(3);
  s_tmp(1367 downto 1140) <= s5_ca_rego5(2);
  s_tmp(1595 downto 1368) <= s6_ca_rego6(1);
  s_tmp(1823 downto 1596) <= s7_ca_rego7(0);
  s_tmp(2047 downto 1824) <= fas(2047 downto 1824);

  s <= s_tmp;

end architecture;

-- short adder
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


entity bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder is
generic(N : natural :=228);
port (
    faa : IN STD_LOGIC_VECTOR (N-1 downto 0);
    fab : IN STD_LOGIC_VECTOR (N-1 downto 0);
    facin : IN STD_LOGIC_VECTOR (0 downto 0);
    fas : OUT STD_LOGIC_VECTOR (N-1 downto 0);
    facout : OUT STD_LOGIC_VECTOR (0 downto 0));
end;

architecture behav of bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder is
    signal tmp : STD_LOGIC_VECTOR (N downto 0);
begin

  tmp <= std_logic_vector(unsigned(std_logic_vector(unsigned(std_logic_vector(resize(unsigned(faa),N+1))) + unsigned(fab))) + unsigned(facin));
  fas <= tmp(N-1 downto 0 );
  facout <= tmp(N downto N);

end behav;

-- the final stage short adder
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;


entity bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder_f is
generic(N : natural :=224);
port (
    faa : IN STD_LOGIC_VECTOR (N-1 downto 0);
    fab : IN STD_LOGIC_VECTOR (N-1 downto 0);
    facin : IN STD_LOGIC_VECTOR (0 downto 0);
    fas : OUT STD_LOGIC_VECTOR (N-1 downto 0);
    facout : OUT STD_LOGIC_VECTOR (0 downto 0));
end;

architecture behav of bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_fadder_f is
    signal tmp : STD_LOGIC_VECTOR (N downto 0);
begin

  tmp <= std_logic_vector(unsigned(std_logic_vector(unsigned(std_logic_vector(resize(unsigned(faa),N+1))) + unsigned(fab))) + unsigned(facin));
  fas <= tmp(N-1 downto 0 );
  facout <= tmp(N downto N);

end behav;

Library IEEE;
use IEEE.std_logic_1164.all;

entity bigint_math_add_2048ns_2048ns_2048_9 is
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER);
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        ce : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR(din0_WIDTH - 1 DOWNTO 0);
        din1 : IN STD_LOGIC_VECTOR(din1_WIDTH - 1 DOWNTO 0);
        dout : OUT STD_LOGIC_VECTOR(dout_WIDTH - 1 DOWNTO 0));
end entity;

architecture arch of bigint_math_add_2048ns_2048ns_2048_9 is
    component bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0 is
        port (
            clk : IN STD_LOGIC;
            reset : IN STD_LOGIC;
            ce : IN STD_LOGIC;
            a : IN STD_LOGIC_VECTOR;
            b : IN STD_LOGIC_VECTOR;
            s : OUT STD_LOGIC_VECTOR);
    end component;



begin
    bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0_U :  component bigint_math_add_2048ns_2048ns_2048_9_AddSubnS_0
    port map (
        clk => clk,
        reset => reset,
        ce => ce,
        a => din0,
        b => din1,
        s => dout);

end architecture;


