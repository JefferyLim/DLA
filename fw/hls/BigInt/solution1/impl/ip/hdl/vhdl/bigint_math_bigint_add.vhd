-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bigint_math_bigint_add is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of bigint_math_bigint_add is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_32 : BOOLEAN;
    signal reg_202 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_60 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_67 : BOOLEAN;
    signal i_15_fu_212_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_15_reg_380 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_77 : BOOLEAN;
    signal tmp_i_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_385 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_229_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_4_reg_398 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_94 : BOOLEAN;
    signal tmp_i1_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_reg_403 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i1_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_110 : BOOLEAN;
    signal tmp_fu_244_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_addr_reg_426 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_fu_259_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_reg_431 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_436 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_287_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal carry_reg_441 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_305_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_addr_3_reg_450 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_110_fu_324_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_110_reg_455 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_139 : BOOLEAN;
    signal i_16_fu_329_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_16_reg_460 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_148 : BOOLEAN;
    signal out_addr_4_reg_465 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_353_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_addr_5_reg_474 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_fu_372_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_reg_479 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_166 : BOOLEAN;
    signal tempA_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempA_ce0 : STD_LOGIC;
    signal tempA_we0 : STD_LOGIC;
    signal tempA_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempA_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempB_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempB_ce0 : STD_LOGIC;
    signal tempB_we0 : STD_LOGIC;
    signal tempB_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempB_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bigint_math_bigint_zero_fu_182_ap_start : STD_LOGIC;
    signal grp_bigint_math_bigint_zero_fu_182_ap_done : STD_LOGIC;
    signal grp_bigint_math_bigint_zero_fu_182_ap_idle : STD_LOGIC;
    signal grp_bigint_math_bigint_zero_fu_182_ap_ready : STD_LOGIC;
    signal grp_bigint_math_bigint_zero_fu_182_in_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bigint_math_bigint_zero_fu_182_in_r_ce0 : STD_LOGIC;
    signal grp_bigint_math_bigint_zero_fu_182_in_r_we0 : STD_LOGIC;
    signal grp_bigint_math_bigint_zero_fu_182_in_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bigint_math_bigint_zero_fu_188_ap_start : STD_LOGIC;
    signal grp_bigint_math_bigint_zero_fu_188_ap_done : STD_LOGIC;
    signal grp_bigint_math_bigint_zero_fu_188_ap_idle : STD_LOGIC;
    signal grp_bigint_math_bigint_zero_fu_188_ap_ready : STD_LOGIC;
    signal grp_bigint_math_bigint_zero_fu_188_in_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bigint_math_bigint_zero_fu_188_in_r_ce0 : STD_LOGIC;
    signal grp_bigint_math_bigint_zero_fu_188_in_r_we0 : STD_LOGIC;
    signal grp_bigint_math_bigint_zero_fu_188_in_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_i_reg_148 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_212 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_224 : BOOLEAN;
    signal i_i1_reg_159 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_233 : BOOLEAN;
    signal i_reg_170 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_245 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_254 : BOOLEAN;
    signal ap_reg_grp_bigint_math_bigint_zero_fu_182_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_bigint_math_bigint_zero_fu_188_ap_start : STD_LOGIC := '0';
    signal tmp_s_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_108_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_111_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_114_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_286 : BOOLEAN;
    signal i_cast_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_118_cast_fu_265_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_119_cast_fu_269_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_105_fu_273_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_123_cast_fu_295_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_122_cast_fu_291_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_106_fu_299_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_107_fu_313_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_134_cast_fu_344_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_133_cast_fu_340_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_112_fu_347_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_113_fu_361_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component bigint_math_bigint_zero IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_we0 : OUT STD_LOGIC;
        in_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component bigint_math_bigint_add_tempA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    tempA_U : component bigint_math_bigint_add_tempA
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tempA_address0,
        ce0 => tempA_ce0,
        we0 => tempA_we0,
        d0 => tempA_d0,
        q0 => tempA_q0);

    tempB_U : component bigint_math_bigint_add_tempA
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tempB_address0,
        ce0 => tempB_ce0,
        we0 => tempB_we0,
        d0 => tempB_d0,
        q0 => tempB_q0);

    grp_bigint_math_bigint_zero_fu_182 : component bigint_math_bigint_zero
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bigint_math_bigint_zero_fu_182_ap_start,
        ap_done => grp_bigint_math_bigint_zero_fu_182_ap_done,
        ap_idle => grp_bigint_math_bigint_zero_fu_182_ap_idle,
        ap_ready => grp_bigint_math_bigint_zero_fu_182_ap_ready,
        in_r_address0 => grp_bigint_math_bigint_zero_fu_182_in_r_address0,
        in_r_ce0 => grp_bigint_math_bigint_zero_fu_182_in_r_ce0,
        in_r_we0 => grp_bigint_math_bigint_zero_fu_182_in_r_we0,
        in_r_d0 => grp_bigint_math_bigint_zero_fu_182_in_r_d0);

    grp_bigint_math_bigint_zero_fu_188 : component bigint_math_bigint_zero
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bigint_math_bigint_zero_fu_188_ap_start,
        ap_done => grp_bigint_math_bigint_zero_fu_188_ap_done,
        ap_idle => grp_bigint_math_bigint_zero_fu_188_ap_idle,
        ap_ready => grp_bigint_math_bigint_zero_fu_188_ap_ready,
        in_r_address0 => grp_bigint_math_bigint_zero_fu_188_in_r_address0,
        in_r_ce0 => grp_bigint_math_bigint_zero_fu_188_in_r_ce0,
        in_r_we0 => grp_bigint_math_bigint_zero_fu_188_in_r_we0,
        in_r_d0 => grp_bigint_math_bigint_zero_fu_188_in_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_bigint_math_bigint_zero_fu_182_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_bigint_math_bigint_zero_fu_182_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_i1_fu_223_p2))))) then 
                    ap_reg_grp_bigint_math_bigint_zero_fu_182_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_bigint_math_bigint_zero_fu_182_ap_ready)) then 
                    ap_reg_grp_bigint_math_bigint_zero_fu_182_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_bigint_math_bigint_zero_fu_188_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_bigint_math_bigint_zero_fu_188_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_grp_bigint_math_bigint_zero_fu_188_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_bigint_math_bigint_zero_fu_188_ap_ready)) then 
                    ap_reg_grp_bigint_math_bigint_zero_fu_188_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i1_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond_i_fu_206_p2 = ap_const_lv1_0)))) then 
                i_i1_reg_159 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                i_i1_reg_159 <= i_4_reg_398;
            end if; 
        end if;
    end process;

    i_i_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                i_i_reg_148 <= i_15_reg_380;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_logic_0 = grp_bigint_math_bigint_zero_fu_182_ap_done) or (ap_const_logic_0 = grp_bigint_math_bigint_zero_fu_188_ap_done))))) then 
                i_i_reg_148 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                i_reg_170 <= i_16_reg_460;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_logic_0 = grp_bigint_math_bigint_zero_fu_182_ap_done)))) then 
                i_reg_170 <= ap_const_lv9_FF;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                    carry_reg_441(0) <= carry_fu_287_p1(0);
                sum_reg_431 <= sum_fu_259_p2;
                tmp_25_reg_436 <= tmp_105_fu_273_p2(8 downto 8);
                tmp_26_reg_446 <= tmp_106_fu_299_p2(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_15_reg_380 <= i_15_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                i_16_reg_460 <= i_16_fu_329_p2;
                out_addr_4_reg_465 <= tmp_111_fu_335_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                i_4_reg_398 <= i_4_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = tmp_26_fu_305_p3)))) then
                out_addr_3_reg_450 <= tmp_108_fu_319_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = tmp_27_fu_353_p3)))) then
                out_addr_5_reg_474 <= tmp_114_fu_367_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_fu_244_p3))) then
                out_addr_reg_426 <= tmp_s_fu_252_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then
                reg_202 <= out_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                tmp_110_reg_455 <= tmp_110_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                tmp_116_reg_479 <= tmp_116_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                tmp_27_reg_470 <= tmp_112_fu_347_p2(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_i1_fu_223_p2))) then
                    tmp_i1_reg_403(8 downto 0) <= tmp_i1_fu_235_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_i_fu_206_p2 = ap_const_lv1_0))) then
                    tmp_i_reg_385(8 downto 0) <= tmp_i_fu_218_p1(8 downto 0);
            end if;
        end if;
    end process;
    tmp_i_reg_385(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_i1_reg_403(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    carry_reg_441(7 downto 1) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_i_fu_206_p2, exitcond_i1_fu_223_p2, tmp_fu_244_p3, grp_bigint_math_bigint_zero_fu_182_ap_done, grp_bigint_math_bigint_zero_fu_188_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not(((ap_const_logic_0 = grp_bigint_math_bigint_zero_fu_182_ap_done) or (ap_const_logic_0 = grp_bigint_math_bigint_zero_fu_188_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond_i_fu_206_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond_i1_fu_223_p2))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_logic_0 = grp_bigint_math_bigint_zero_fu_182_ap_done))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_lv1_0 = tmp_fu_244_p3))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    a_address0 <= tmp_i_fu_218_p1(8 - 1 downto 0);

    a_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st8_fsm_7, tmp_fu_244_p3)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_fu_244_p3))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, tmp_fu_244_p3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_fu_244_p3)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_110 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_139_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_139 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_148 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_166 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_212_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_212 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_224_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_224 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_233 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_245_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_245 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_254_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_254 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_286_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_286 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_32_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_32 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_60_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_60 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_67 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_77_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_77 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_94 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_139)
    begin
        if (ap_sig_139) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_286)
    begin
        if (ap_sig_286) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_148)
    begin
        if (ap_sig_148) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_67)
    begin
        if (ap_sig_67) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_166)
    begin
        if (ap_sig_166) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_254)
    begin
        if (ap_sig_254) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_32)
    begin
        if (ap_sig_32) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_212)
    begin
        if (ap_sig_212) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_77)
    begin
        if (ap_sig_77) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_224)
    begin
        if (ap_sig_224) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_94)
    begin
        if (ap_sig_94) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_233)
    begin
        if (ap_sig_233) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_245)
    begin
        if (ap_sig_245) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_110)
    begin
        if (ap_sig_110) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_60)
    begin
        if (ap_sig_60) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= tmp_i1_fu_235_p1(8 - 1 downto 0);

    b_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    carry_fu_287_p1 <= std_logic_vector(resize(unsigned(tmp_25_fu_279_p3),8));
    exitcond_i1_fu_223_p2 <= "1" when (i_i1_reg_159 = ap_const_lv9_100) else "0";
    exitcond_i_fu_206_p2 <= "1" when (i_i_reg_148 = ap_const_lv9_100) else "0";
    grp_bigint_math_bigint_zero_fu_182_ap_start <= ap_reg_grp_bigint_math_bigint_zero_fu_182_ap_start;
    grp_bigint_math_bigint_zero_fu_188_ap_start <= ap_reg_grp_bigint_math_bigint_zero_fu_188_ap_start;
    grp_fu_195_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(out_r_q0));
    i_15_fu_212_p2 <= std_logic_vector(unsigned(i_i_reg_148) + unsigned(ap_const_lv9_1));
    i_16_fu_329_p2 <= std_logic_vector(unsigned(i_reg_170) + unsigned(ap_const_lv9_1FF));
    i_4_fu_229_p2 <= std_logic_vector(unsigned(i_i1_reg_159) + unsigned(ap_const_lv9_1));
        i_cast_fu_240_p1 <= std_logic_vector(resize(signed(i_reg_170),32));


    out_r_address0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st8_fsm_7, out_addr_reg_426, out_addr_3_reg_450, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st12_fsm_11, out_addr_4_reg_465, out_addr_5_reg_474, ap_sig_cseq_ST_st14_fsm_13, grp_bigint_math_bigint_zero_fu_182_in_r_address0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, tmp_s_fu_252_p1, tmp_108_fu_319_p1, tmp_111_fu_335_p1, tmp_114_fu_367_p1, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            out_r_address0 <= out_addr_4_reg_465;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            out_r_address0 <= out_addr_5_reg_474;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            out_r_address0 <= out_addr_reg_426;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            out_r_address0 <= out_addr_3_reg_450;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            out_r_address0 <= tmp_114_fu_367_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            out_r_address0 <= tmp_111_fu_335_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            out_r_address0 <= tmp_108_fu_319_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            out_r_address0 <= tmp_s_fu_252_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            out_r_address0 <= grp_bigint_math_bigint_zero_fu_182_in_r_address0;
        else 
            out_r_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st14_fsm_13, grp_bigint_math_bigint_zero_fu_182_in_r_ce0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            out_r_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            out_r_ce0 <= grp_bigint_math_bigint_zero_fu_182_in_r_ce0;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_d0_assign_proc : process(tmp_110_reg_455, ap_sig_cseq_ST_st10_fsm_9, tmp_116_reg_479, ap_sig_cseq_ST_st14_fsm_13, grp_bigint_math_bigint_zero_fu_182_in_r_d0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, grp_fu_195_p2, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            out_r_d0 <= tmp_116_reg_479;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            out_r_d0 <= tmp_110_reg_455;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            out_r_d0 <= grp_fu_195_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            out_r_d0 <= grp_bigint_math_bigint_zero_fu_182_in_r_d0;
        else 
            out_r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    out_r_we0_assign_proc : process(tmp_26_reg_446, ap_sig_cseq_ST_st10_fsm_9, tmp_27_reg_470, ap_sig_cseq_ST_st14_fsm_13, grp_bigint_math_bigint_zero_fu_182_in_r_we0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = tmp_26_reg_446))) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = tmp_27_reg_470))))) then 
            out_r_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            out_r_we0 <= grp_bigint_math_bigint_zero_fu_182_in_r_we0;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_fu_259_p2 <= std_logic_vector(unsigned(tempA_q0) + unsigned(tempB_q0));

    tempA_address0_assign_proc : process(tmp_i_reg_385, ap_sig_cseq_ST_st8_fsm_7, grp_bigint_math_bigint_zero_fu_182_in_r_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, tmp_s_fu_252_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            tempA_address0 <= tmp_i_reg_385(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            tempA_address0 <= tmp_s_fu_252_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            tempA_address0 <= grp_bigint_math_bigint_zero_fu_182_in_r_address0;
        else 
            tempA_address0 <= "XXXXXXXX";
        end if; 
    end process;


    tempA_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_bigint_math_bigint_zero_fu_182_in_r_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            tempA_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            tempA_ce0 <= grp_bigint_math_bigint_zero_fu_182_in_r_ce0;
        else 
            tempA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempA_d0_assign_proc : process(a_q0, grp_bigint_math_bigint_zero_fu_182_in_r_d0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            tempA_d0 <= a_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            tempA_d0 <= grp_bigint_math_bigint_zero_fu_182_in_r_d0;
        else 
            tempA_d0 <= "XXXXXXXX";
        end if; 
    end process;


    tempA_we0_assign_proc : process(grp_bigint_math_bigint_zero_fu_182_in_r_we0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            tempA_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            tempA_we0 <= grp_bigint_math_bigint_zero_fu_182_in_r_we0;
        else 
            tempA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tempB_address0_assign_proc : process(tmp_i1_reg_403, ap_sig_cseq_ST_st8_fsm_7, grp_bigint_math_bigint_zero_fu_188_in_r_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, tmp_s_fu_252_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tempB_address0 <= tmp_i1_reg_403(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            tempB_address0 <= tmp_s_fu_252_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            tempB_address0 <= grp_bigint_math_bigint_zero_fu_188_in_r_address0;
        else 
            tempB_address0 <= "XXXXXXXX";
        end if; 
    end process;


    tempB_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, grp_bigint_math_bigint_zero_fu_188_in_r_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            tempB_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            tempB_ce0 <= grp_bigint_math_bigint_zero_fu_188_in_r_ce0;
        else 
            tempB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempB_d0_assign_proc : process(b_q0, grp_bigint_math_bigint_zero_fu_188_in_r_d0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tempB_d0 <= b_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            tempB_d0 <= grp_bigint_math_bigint_zero_fu_188_in_r_d0;
        else 
            tempB_d0 <= "XXXXXXXX";
        end if; 
    end process;


    tempB_we0_assign_proc : process(grp_bigint_math_bigint_zero_fu_188_in_r_we0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            tempB_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            tempB_we0 <= grp_bigint_math_bigint_zero_fu_188_in_r_we0;
        else 
            tempB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_105_fu_273_p2 <= std_logic_vector(unsigned(tmp_118_cast_fu_265_p1) + unsigned(tmp_119_cast_fu_269_p1));
    tmp_106_fu_299_p2 <= std_logic_vector(unsigned(tmp_123_cast_fu_295_p1) + unsigned(tmp_122_cast_fu_291_p1));
    tmp_107_fu_313_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(i_reg_170));
        tmp_108_fu_319_p1 <= std_logic_vector(resize(signed(tmp_107_fu_313_p2),64));

    tmp_110_fu_324_p2 <= std_logic_vector(unsigned(sum_reg_431) + unsigned(reg_202));
        tmp_111_fu_335_p1 <= std_logic_vector(resize(signed(i_16_fu_329_p2),64));

    tmp_112_fu_347_p2 <= std_logic_vector(unsigned(tmp_134_cast_fu_344_p1) + unsigned(tmp_133_cast_fu_340_p1));
    tmp_113_fu_361_p2 <= std_logic_vector(signed(ap_const_lv9_1FE) + signed(i_reg_170));
        tmp_114_fu_367_p1 <= std_logic_vector(resize(signed(tmp_113_fu_361_p2),64));

    tmp_116_fu_372_p2 <= std_logic_vector(unsigned(reg_202) + unsigned(carry_reg_441));
    tmp_118_cast_fu_265_p1 <= std_logic_vector(resize(unsigned(tempA_q0),9));
    tmp_119_cast_fu_269_p1 <= std_logic_vector(resize(unsigned(tempB_q0),9));
    tmp_122_cast_fu_291_p1 <= std_logic_vector(resize(unsigned(out_r_q0),9));
    tmp_123_cast_fu_295_p1 <= std_logic_vector(resize(unsigned(sum_fu_259_p2),9));
    tmp_133_cast_fu_340_p1 <= std_logic_vector(resize(unsigned(out_r_q0),9));
    tmp_134_cast_fu_344_p1 <= std_logic_vector(resize(unsigned(tmp_25_reg_436),9));
    tmp_25_fu_279_p3 <= tmp_105_fu_273_p2(8 downto 8);
    tmp_26_fu_305_p3 <= tmp_106_fu_299_p2(8 downto 8);
    tmp_27_fu_353_p3 <= tmp_112_fu_347_p2(8 downto 8);
    tmp_fu_244_p3 <= i_reg_170(8 downto 8);
    tmp_i1_fu_235_p1 <= std_logic_vector(resize(unsigned(i_i1_reg_159),64));
    tmp_i_fu_218_p1 <= std_logic_vector(resize(unsigned(i_i_reg_148),64));
    tmp_s_fu_252_p1 <= std_logic_vector(resize(unsigned(i_cast_fu_240_p1),64));
end behav;
