// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "bigint_math.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic bigint_math::ap_const_logic_1 = sc_dt::Log_1;
const int bigint_math::C_S_AXI_DATA_WIDTH = "100000";
const sc_logic bigint_math::ap_const_logic_0 = sc_dt::Log_0;

bigint_math::bigint_math(sc_module_name name) : sc_module(name), mVcdFile(0) {
    bigint_math_PERIPH_BUS_s_axi_U = new bigint_math_PERIPH_BUS_s_axi<C_S_AXI_PERIPH_BUS_ADDR_WIDTH,C_S_AXI_PERIPH_BUS_DATA_WIDTH>("bigint_math_PERIPH_BUS_s_axi_U");
    bigint_math_PERIPH_BUS_s_axi_U->AWVALID(s_axi_PERIPH_BUS_AWVALID);
    bigint_math_PERIPH_BUS_s_axi_U->AWREADY(s_axi_PERIPH_BUS_AWREADY);
    bigint_math_PERIPH_BUS_s_axi_U->AWADDR(s_axi_PERIPH_BUS_AWADDR);
    bigint_math_PERIPH_BUS_s_axi_U->WVALID(s_axi_PERIPH_BUS_WVALID);
    bigint_math_PERIPH_BUS_s_axi_U->WREADY(s_axi_PERIPH_BUS_WREADY);
    bigint_math_PERIPH_BUS_s_axi_U->WDATA(s_axi_PERIPH_BUS_WDATA);
    bigint_math_PERIPH_BUS_s_axi_U->WSTRB(s_axi_PERIPH_BUS_WSTRB);
    bigint_math_PERIPH_BUS_s_axi_U->ARVALID(s_axi_PERIPH_BUS_ARVALID);
    bigint_math_PERIPH_BUS_s_axi_U->ARREADY(s_axi_PERIPH_BUS_ARREADY);
    bigint_math_PERIPH_BUS_s_axi_U->ARADDR(s_axi_PERIPH_BUS_ARADDR);
    bigint_math_PERIPH_BUS_s_axi_U->RVALID(s_axi_PERIPH_BUS_RVALID);
    bigint_math_PERIPH_BUS_s_axi_U->RREADY(s_axi_PERIPH_BUS_RREADY);
    bigint_math_PERIPH_BUS_s_axi_U->RDATA(s_axi_PERIPH_BUS_RDATA);
    bigint_math_PERIPH_BUS_s_axi_U->RRESP(s_axi_PERIPH_BUS_RRESP);
    bigint_math_PERIPH_BUS_s_axi_U->BVALID(s_axi_PERIPH_BUS_BVALID);
    bigint_math_PERIPH_BUS_s_axi_U->BREADY(s_axi_PERIPH_BUS_BREADY);
    bigint_math_PERIPH_BUS_s_axi_U->BRESP(s_axi_PERIPH_BUS_BRESP);
    bigint_math_PERIPH_BUS_s_axi_U->ACLK(ap_clk);
    bigint_math_PERIPH_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    bigint_math_PERIPH_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    bigint_math_PERIPH_BUS_s_axi_U->ap_start(ap_start);
    bigint_math_PERIPH_BUS_s_axi_U->interrupt(interrupt);
    bigint_math_PERIPH_BUS_s_axi_U->ap_ready(ap_ready);
    bigint_math_PERIPH_BUS_s_axi_U->ap_done(ap_done);
    bigint_math_PERIPH_BUS_s_axi_U->ap_idle(ap_idle);
    bigint_math_PERIPH_BUS_s_axi_U->number1_V(number1_V);
    bigint_math_PERIPH_BUS_s_axi_U->number2_V(number2_V);
    bigint_math_PERIPH_BUS_s_axi_U->output_V(output_V);
    bigint_math_PERIPH_BUS_s_axi_U->output_V_ap_vld(output_V_ap_vld);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_output_V);
    sensitive << ( ap_start );
    sensitive << ( number1_V );
    sensitive << ( number2_V );

    SC_METHOD(thread_output_V_ap_vld);
    sensitive << ( ap_start );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "bigint_math_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_AWVALID, "(port)s_axi_PERIPH_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_AWREADY, "(port)s_axi_PERIPH_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_AWADDR, "(port)s_axi_PERIPH_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_WVALID, "(port)s_axi_PERIPH_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_WREADY, "(port)s_axi_PERIPH_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_WDATA, "(port)s_axi_PERIPH_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_WSTRB, "(port)s_axi_PERIPH_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_ARVALID, "(port)s_axi_PERIPH_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_ARREADY, "(port)s_axi_PERIPH_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_ARADDR, "(port)s_axi_PERIPH_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_RVALID, "(port)s_axi_PERIPH_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_RREADY, "(port)s_axi_PERIPH_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_RDATA, "(port)s_axi_PERIPH_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_RRESP, "(port)s_axi_PERIPH_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_BVALID, "(port)s_axi_PERIPH_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_BREADY, "(port)s_axi_PERIPH_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_PERIPH_BUS_BRESP, "(port)s_axi_PERIPH_BUS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, number1_V, "number1_V");
    sc_trace(mVcdFile, number2_V, "number2_V");
    sc_trace(mVcdFile, output_V, "output_V");
    sc_trace(mVcdFile, output_V_ap_vld, "output_V_ap_vld");
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
#endif

    }
    mHdltvinHandle.open("bigint_math.hdltvin.dat");
    mHdltvoutHandle.open("bigint_math.hdltvout.dat");
}

bigint_math::~bigint_math() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete bigint_math_PERIPH_BUS_s_axi_U;
}

void bigint_math::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void bigint_math::thread_ap_done() {
    ap_done = ap_start.read();
}

void bigint_math::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void bigint_math::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void bigint_math::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void bigint_math::thread_output_V() {
    output_V = (number2_V.read() ^ number1_V.read());
}

void bigint_math::thread_output_V_ap_vld() {
    if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
        output_V_ap_vld = ap_const_logic_1;
    } else {
        output_V_ap_vld = ap_const_logic_0;
    }
}

void bigint_math::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_PERIPH_BUS_AWVALID\" :  \"" << s_axi_PERIPH_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_PERIPH_BUS_AWREADY\" :  \"" << s_axi_PERIPH_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_PERIPH_BUS_AWADDR\" :  \"" << s_axi_PERIPH_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_PERIPH_BUS_WVALID\" :  \"" << s_axi_PERIPH_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_PERIPH_BUS_WREADY\" :  \"" << s_axi_PERIPH_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_PERIPH_BUS_WDATA\" :  \"" << s_axi_PERIPH_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_PERIPH_BUS_WSTRB\" :  \"" << s_axi_PERIPH_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_PERIPH_BUS_ARVALID\" :  \"" << s_axi_PERIPH_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_PERIPH_BUS_ARREADY\" :  \"" << s_axi_PERIPH_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_PERIPH_BUS_ARADDR\" :  \"" << s_axi_PERIPH_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_PERIPH_BUS_RVALID\" :  \"" << s_axi_PERIPH_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_PERIPH_BUS_RREADY\" :  \"" << s_axi_PERIPH_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_PERIPH_BUS_RDATA\" :  \"" << s_axi_PERIPH_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_PERIPH_BUS_RRESP\" :  \"" << s_axi_PERIPH_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_PERIPH_BUS_BVALID\" :  \"" << s_axi_PERIPH_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_PERIPH_BUS_BREADY\" :  \"" << s_axi_PERIPH_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_PERIPH_BUS_BRESP\" :  \"" << s_axi_PERIPH_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

